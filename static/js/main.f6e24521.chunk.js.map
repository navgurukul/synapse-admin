{"version":3,"sources":["synapse/authProvider.js","synapse/dataProvider.js","components/ServerNotices.js","components/devices.js","components/users.js","components/rooms.js","components/EventReports.js","components/LoginPage.js","components/statistics.js","components/ImportFeature.js","i18n/de.js","App.js","i18n/en.js","index.js"],"names":["authProvider","login","base_url","username","password","console","log","options","method","body","JSON","stringify","type","user","localStorage","setItem","login_api_url","window","decodeURIComponent","fetchUtils","fetchJson","then","json","home_server","user_id","access_token","device_id","logout","removeItem","Promise","resolve","checkError","status","reject","checkAuth","getItem","getPermissions","jsonClient","url","token","authenticated","c_to_id","user_name","resource","indexOf","mxcUrlToHttp","mxcUrl","homeserver","ret","exec","serverName","mediaId","resourceMap","users","path","map","u","id","name","split","slice","avatar_src","avatar_url","is_guest","admin","deactivated","creation_ts_ms","creation_ts","data","total","create","endpoint","delete","params","erase","rooms","r","room_id","alias","canonical_alias","members","joined_members","is_encrypted","encryption","federatable","public","total_rooms","block","reports","er","devices","d","reference","connections","c","room_members","m","pushers","p","pushkey","joined_rooms","jr","users_media","um","media_id","servernotices","n","event_id","content","msgtype","user_media_statistics","usms","filterNullValues","key","value","getSearchOrder","order","dataProvider","getList","filter","guests","search_term","pagination","page","perPage","sort","field","from","query","limit","order_by","dir","res","endpoint_url","getOne","getMany","all","ids","responses","length","getManyReference","ref","headers","update","updateMany","threepids","email","push","msisdn","createMany","cre","del","deleteMany","ServerNoticeDialog","open","loading","onClose","onSend","translate","useTranslate","ServerNoticeToolbar","props","Toolbar","SaveButton","label","Button","onClick","Dialog","DialogTitle","DialogContent","DialogContentText","SimpleForm","toolbar","submitOnEnter","redirect","save","TextInput","source","fullWidth","multiline","rows","resettable","validate","required","ServerNoticeButton","record","useState","setOpen","notify","useNotify","useCreate","handleDialogClose","disabled","values","payload","onSuccess","onFailure","ServerNoticeBulkButton","selectedIds","unselectAll","useUnselectAll","useMutation","error","useStyles","makeStyles","theme","deleteButton","color","palette","main","backgroundColor","fade","DeviceRemoveButton","classes","refresh","useRefresh","removeDevice","className","classnames","Confirm","isOpen","onConfirm","title","translateOptions","display_name","basePath","pathname","small","height","width","large","float","UserListActions","currentSort","filters","displayedFilters","exporter","filterValues","permanentFilter","hasCreate","showFilter","onUnselectItems","maxResults","rest","redirectTo","useRedirect","TopToolbar","sanitizeListRestProps","cloneElement","context","CreateButton","ExportButton","style","transform","fontSize","defaultProps","UserPagination","Pagination","rowsPerPageOptions","UserFilter","Filter","SearchInput","alwaysOn","BooleanInput","UserBulkActionButtons","BulkDeleteButton","AvatarField","Avatar","src","UserList","List","filterDefaultValues","actions","bulkActionButtons","Datagrid","rowClick","sortable","TextField","BooleanField","validateUser","regex","validateEmail","generateRandomUser","Array","fill","x","Math","floor","crypto","getRandomValues","Uint32Array","join","UserEditToolbar","DeleteButton","UserCreate","Create","autoComplete","PasswordInput","UserTitle","smart_count","displayname","UserEdit","Edit","TabbedForm","FormTab","icon","helperText","DateField","showTime","year","month","day","hour","minute","second","ArrayInput","SimpleFormIterator","SelectInput","choices","ReferenceManyField","target","addLabel","ReferenceField","link","ArrayField","NumberField","undoable","RoomPagination","EncryptionField","emptyText","get","ariaLabel","Typography","component","variant","Tooltip","_","data-testid","htmlColor","RoomTitle","RoomShowActions","confirmTitle","confirmContent","RoomShow","Show","TabbedShowLayout","Tab","SelectField","RoomBulkActionButtons","BulkDeleteWithConfirmButton","RoomFilter","Chip","defaultValue","marginBottom","RoomList","connect","state","roomfilters","resources","list","localMembersFilter","joined_local_members","stateEventsFilter","state_events","versionFilter","version","federateableFilter","sortBy","ReportPagination","ReportShow","ReportList","display","flexDirection","minHeight","alignItems","justifyContent","background","backgroundRepeat","backgroundSize","card","minWidth","marginTop","avatar","margin","secondary","hint","grey","form","padding","input","serverVersion","fontFamily","marginLeft","LoginPage","useLogin","setLoading","renderInput","meta","touched","inputProps","UserData","formData","useForm","setServerVersion","useEffect","match","versionUrl","catch","autoFocus","onBlur","extractHomeServer","wellKnownUrl","change","initialValues","onSubmit","auth","message","errors","render","handleSubmit","noValidate","Card","FormDataConsumer","formDataProps","CardActions","button","CircularProgress","size","thickness","Notification","UserMediaStatsPagination","UserMediaStatsFilter","UserMediaStatsList","expectedFields","optionalFields","TranslatableOption","text","ImportFeature","setValues","setError","stats","setStats","dryRun","setDryRun","progress","setProgress","importResults","setImportResults","skippedRecords","setSkippedRecords","conflictMode","setConflictMode","passwordMode","setPasswordMode","useridMode","setUseridMode","useDataProvider","onFileChange","e","a","file","files","toFixed","parseCsv","header","skipEmptyLines","complete","result","verifyCsv","eF","oF","fields","forEach","includes","v","user_types","default","line","idx","undefined","user_type","is_admin","f","row","runImport","doImport","results","unparseCsv","erroredRecords","succeededRecords","changeStats","toAdmin","toGuest","toRegular","replacedPassword","entriesDone","entriesCount","done","entry","userRecord","overwriteData","Object","assign","retries","submitRecord","recordData","alreadyExists","Error","newRecordData","warn","okToSubmit","totalRecordCount","wasDryRun","onConflictModeChanged","onUseridModeChanged","statsCards","CardHeader","CardContent","NativeSelect","onChange","enabled","toString","FormControlLabel","control","Checkbox","checked","conflictCards","errorCards","isArray","uploadCard","href","resultsCard","element","document","createElement","Blob","URL","createObjectURL","download","appendChild","click","startImportCard","ev","allCards","cardContainer","Title","defaultTitle","germanMessages","synapseadmin","welcome","server_version","username_error","protocol_error","url_error","invalid_user_id","details","tabs","basic","detail","permission","import_users","at_entry","required_field","invalid_value","unreasonably_big","already_in_progress","id_exits","goToPdf","cards","importstats","users_total","guest_count","admin_count","conflicts","mode","stop","skip","all_ids_present","count_ids_present","ignore","passwords","all_passwords_present","count_passwords_present","use_passwords","upload","explanation","startImport","simulate_only","run_import","successful","skipped","download_skipped","with_error","simulated_only","backtolist","threepid","show_deactivated","medium","address","consent_version","helper","deactivate","action","creator","join_rules","guest_access","history_visibility","enums","knock","invite","private","can_join","forbidden","invited","joined","shared","world_readable","unencrypted","received_ts","score","reason","event_json","origin","origin_server_ts","format","formatted_body","algorithm","last_seen","ip","user_agent","last_seen_ts","last_seen_ip","success","failure","media_length","media_type","upload_name","quarantined_by","safe_from_quarantine","created_ts","last_access_ts","app","app_display_name","app_id","device_display_name","kind","lang","profile_tag","send","send_success","send_failure","media_count","ra","auth_check_error","toggle_hidden","toggle_visible","notification","notifiaction","logged_out","empty","messages","de","en","englishMessages","i18nProvider","polyglotI18nProvider","locale","resolveBrowserLocale","App","Admin","loginPage","customRoutes","Resource","edit","UserIcon","show","RoomIcon","EqualizerIcon","ReportIcon","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.f6e24521.chunk.js","sourcesContent":["import { fetchUtils } from \"react-admin\";\n\nconst authProvider = {\n  // called when the user attempts to log in\n  login: ({ base_url, username, password }) => {\n    console.log(\"login \");\n    const options = {\n      method: \"POST\",\n      body: JSON.stringify({\n        type: \"m.login.password\",\n        user: username,\n        password: password,\n      }),\n    };\n\n    // use the base_url from login instead of the well_known entry from the\n    // server, since the admin might want to access the admin API via some\n    // private address\n    localStorage.setItem(\"base_url\", base_url);\n\n    const decoded_base_url = window.decodeURIComponent(base_url);\n    const login_api_url = decoded_base_url + \"/_matrix/client/r0/login\";\n\n    return fetchUtils.fetchJson(login_api_url, options).then(({ json }) => {\n      localStorage.setItem(\"home_server\", json.home_server);\n      localStorage.setItem(\"user_id\", json.user_id);\n      localStorage.setItem(\"access_token\", json.access_token);\n      localStorage.setItem(\"device_id\", json.device_id);\n    });\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    console.log(\"logout \");\n    localStorage.removeItem(\"access_token\");\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({ status }) => {\n    console.log(\"checkError \" + status);\n    if (status === 401 || status === 403) {\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    const access_token = localStorage.getItem(\"access_token\");\n    console.log(\"checkAuth \" + access_token);\n    return typeof access_token == \"string\"\n      ? Promise.resolve()\n      : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve(),\n};\n\nexport default authProvider;\n","import { fetchUtils } from \"react-admin\";\nimport { stringify } from \"query-string\";\n\n// Adds the access token to all requests\nconst jsonClient = (url, options = {}) => {\n  const token = localStorage.getItem(\"access_token\");\n  console.log(\"httpClient \" + url);\n  if (token != null) {\n    options.user = {\n      authenticated: true,\n      token: `Bearer ${token}`,\n    };\n  }\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst c_to_id = (user_name, resource) => {\n  if (user_name.indexOf('navgurukul.org')>-1)\n    return user_name;\n\n  if (resource === 'users' || resource=== \"connections\")\n    return '@'+ user_name +':navgurukul.org';\n  else if (resource === 'rooms')\n    return '#' + user_name + ':navgurukul.org';\n\n  return user_name;\n}\nconst mxcUrlToHttp = mxcUrl => {\n  const homeserver = localStorage.getItem(\"base_url\");\n  const re = /^mxc:\\/\\/([^/]+)\\/(\\w+)/;\n  var ret = re.exec(mxcUrl);\n  console.log(\"mxcClient \" + ret);\n  if (ret == null) return null;\n  const serverName = ret[1];\n  const mediaId = ret[2];\n  return `${homeserver}/_matrix/media/r0/thumbnail/${serverName}/${mediaId}?width=24&height=24&method=scale`;\n};\n\nconst resourceMap = {\n  users: {\n    path: \"/_synapse/admin/v2/users\",\n    map: u => ({\n      ...u,\n      id: u.name.split(':')[0].slice(1),\n      avatar_src: mxcUrlToHttp(u.avatar_url),\n      is_guest: !!u.is_guest,\n      admin: !!u.admin,\n      deactivated: !!u.deactivated,\n      // need timestamp in milliseconds\n      creation_ts_ms: u.creation_ts * 1000,\n    }),\n    data: \"users\",\n    total: json => json.total,\n    create: data => ({\n      endpoint: `/_synapse/admin/v2/users/${data.id}`,\n      body: data,\n      method: \"PUT\",\n    }),\n    delete: params => ({\n      endpoint: `/_synapse/admin/v1/deactivate/${c_to_id(params.id, 'users')}`,\n      body: { erase: true },\n      method: \"POST\",\n    }),\n  },\n  rooms: {\n    path: \"/_synapse/admin/v1/rooms\",\n    map: r => ({\n      ...r,\n      id: r.room_id,\n      alias: r.canonical_alias,\n      members: r.joined_members,\n      is_encrypted: !!r.encryption,\n      federatable: !!r.federatable,\n      public: !!r.public,\n    }),\n    data: \"rooms\",\n    total: json => {\n      return json.total_rooms;\n    },\n    delete: params => ({\n      endpoint: `/_synapse/admin/v1/rooms/${params.id}/delete`,\n      body: { block: false },\n      method: \"POST\",\n    }),\n  },\n  reports: {\n    path: \"/_synapse/admin/v1/event_reports\",\n    map: er => ({\n      ...er,\n      id: er.id,\n    }),\n    data: \"event_reports\",\n    total: json => json.total,\n  },\n  devices: {\n    map: d => ({\n      ...d,\n      id: d.device_id,\n    }),\n    data: \"devices\",\n    total: json => {\n      return json.total;\n    },\n    reference: id => ({\n      endpoint: `/_synapse/admin/v2/users/${id}/devices`,\n    }),\n    delete: params => ({\n      endpoint: `/_synapse/admin/v2/users/${params.user_id}/devices/${params.id}`,\n    }),\n  },\n  connections: {\n    path: \"/_synapse/admin/v1/whois\",\n    map: c => ({\n      ...c,\n      id: c_to_id(c.user_id),\n    }),\n    data: \"connections\",\n  },\n  room_members: {\n    map: m => ({\n      id: m,\n    }),\n    reference: id => ({\n      endpoint: `/_synapse/admin/v1/rooms/${id}/members`,\n    }),\n    data: \"members\",\n    total: json => {\n      return json.total;\n    },\n  },\n  pushers: {\n    map: p => ({\n      ...p,\n      id: p.pushkey,\n    }),\n    reference: id => ({\n      endpoint: `/_synapse/admin/v1/users/${id}/pushers`,\n    }),\n    data: \"pushers\",\n    total: json => {\n      return json.total;\n    },\n  },\n  joined_rooms: {\n    map: jr => ({\n      id: jr,\n    }),\n    reference: id => ({\n      endpoint: `/_synapse/admin/v1/users/${id}/joined_rooms`,\n    }),\n    data: \"joined_rooms\",\n    total: json => {\n      return json.total;\n    },\n  },\n  users_media: {\n    map: um => ({\n      ...um,\n      id: um.media_id,\n    }),\n    reference: id => ({\n      endpoint: `/_synapse/admin/v1/users/${id}/media`,\n    }),\n    data: \"media\",\n    total: json => {\n      return json.total;\n    },\n    delete: params => ({\n      endpoint: `/_synapse/admin/v1/media/${localStorage.getItem(\n        \"home_server\"\n      )}/${params.id}`,\n    }),\n  },\n  servernotices: {\n    map: n => ({ id: n.event_id }),\n    create: data => ({\n      endpoint: \"/_synapse/admin/v1/send_server_notice\",\n      body: {\n        user_id: data.id,\n        content: {\n          msgtype: \"m.text\",\n          body: data.body,\n        },\n      },\n      method: \"POST\",\n    }),\n  },\n  user_media_statistics: {\n    path: \"/_synapse/admin/v1/statistics/users/media\",\n    map: usms => ({\n      ...usms,\n      id: usms.user_id,\n    }),\n    data: \"users\",\n    total: json => {\n      return json.total;\n    },\n  },\n};\n\nfunction filterNullValues(key, value) {\n  // Filtering out null properties\n  if (value === null) {\n    return undefined;\n  }\n  return value;\n}\n\nfunction getSearchOrder(order) {\n  if (order === \"DESC\") {\n    return \"b\";\n  } else {\n    return \"f\";\n  }\n}\n\nconst dataProvider = {\n  getList: (resource, params) => {\n    console.log(\"getList \" + resource);\n    const { user_id, name, guests, deactivated, search_term } = params.filter;\n    const { page, perPage } = params.pagination;\n    const { field, order } = params.sort;\n    const from = (page - 1) * perPage;\n    const query = {\n      from: from,\n      limit: perPage,\n      user_id: user_id,\n      search_term: search_term,\n      name: name,\n      guests: guests,\n      deactivated: deactivated,\n      order_by: field,\n      dir: getSearchOrder(order),\n    };\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    const endpoint_url = homeserver + res.path;\n    const url = `${endpoint_url}?${stringify(query)}`;\n\n    return jsonClient(url).then(({ json }) => ({\n      data: json[res.data].map(res.map),\n      total: res.total(json, from, perPage),\n    }));\n  },\n\n  getOne: (resource, params) => {\n    console.log(\"getOne \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n    params.id = c_to_id(params.id, resource);\n\n    const endpoint_url = homeserver + res.path;\n    return jsonClient(`${endpoint_url}/${params.id}`).then(({ json }) => ({\n      data: res.map(json),\n    }));\n  },\n\n  getMany: (resource, params) => {\n    console.log(\"getMany \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    const endpoint_url = homeserver + res.path;\n    return Promise.all(\n      params.ids.map(\n        id => {\n          console.log(id);\n          return jsonClient(`${endpoint_url}/${c_to_id(id, resource)}`)\n        }\n      )\n    ).then(responses => ({\n      data: responses.map(({ json }) => res.map(json)),\n      total: responses.length,\n    }));\n  },\n\n  getManyReference: (resource, params) => {\n    console.log(\"getManyReference \" + resource);\n    const { page, perPage } = params.pagination;\n    const from = (page - 1) * perPage;\n    const query = {\n      from: from,\n      limit: perPage,\n    };\n\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    const ref = res[\"reference\"](params.id);\n    const endpoint_url = `${homeserver}${ref.endpoint}?${stringify(query)}`;\n\n    return jsonClient(endpoint_url).then(({ headers, json }) => ({\n      data: json[res.data].map(res.map),\n      total: res.total(json, from, perPage),\n    }));\n  },\n\n  update: (resource, params) => {\n    console.log(\"update \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    const endpoint_url = homeserver + res.path;\n    return jsonClient(`${endpoint_url}/${c_to_id(params.data.id, resource)}`, {\n      method: \"PUT\",\n      body: JSON.stringify(params.data, filterNullValues),\n    }).then(({ json }) => ({\n      data: res.map(json),\n    }));\n  },\n\n  updateMany: (resource, params) => {\n    console.log(\"updateMany \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    const endpoint_url = homeserver + res.path;\n    return Promise.all(\n      params.ids.map(id => jsonClient(`${endpoint_url}/${c_to_id(id, resource)}`), {\n        method: \"PUT\",\n        body: JSON.stringify(params.data, filterNullValues),\n      })\n    ).then(responses => ({\n      data: responses.map(({ json }) => json),\n    }));\n  },\n\n  create: (resource, params) => {\n    console.log(\"create \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    if (!(\"create\" in res)) return Promise.reject();\n\n    params.data.id = c_to_id(params.data.id, resource);\n    params.data.threepids=[];\n\n    if (params.data.email)\n      params.data.threepids.push({\"medium\": \"email\", \"address\": params.data.email})\n\n    if (params.data.msisdn)\n      params.data.threepids.push({\"medium\": \"msisdn\", \"address\": params.data.msisdn})\n\n    const create = res[\"create\"](params.data);\n    const endpoint_url = homeserver + create.endpoint;\n    return jsonClient(endpoint_url, {\n      method: create.method,\n      body: JSON.stringify(create.body, filterNullValues),\n    }).then(({ json }) => ({\n      data: res.map(json),\n    }));\n  },\n\n  createMany: (resource, params) => {\n    console.log(\"createMany \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n    if (!(\"create\" in res)) return Promise.reject();\n\n    return Promise.all(\n      params.ids.map(id => {\n        params.data.id = id;\n        const cre = res[\"create\"](params.data);\n        const endpoint_url = homeserver + cre.endpoint;\n        return jsonClient(endpoint_url, {\n          method: cre.method,\n          body: JSON.stringify(cre.body, filterNullValues),\n        });\n      })\n    ).then(responses => ({\n      data: responses.map(({ json }) => json),\n    }));\n  },\n\n  delete: (resource, params) => {\n    console.log(\"delete \" + resource);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    if (\"delete\" in res) {\n      const del = res[\"delete\"](params);\n      const endpoint_url = homeserver + del.endpoint;\n\n      console.log(23, del.body);\n\n      return jsonClient(endpoint_url, {\n        method: \"method\" in del ? del.method : \"DELETE\",\n        body: \"body\" in del ? JSON.stringify(del.body) : null,\n      }).then(({ json }) => ({\n        data: json,\n      }));\n    } else {\n      console.log(12, params);\n      const endpoint_url = homeserver + res.path;\n      return jsonClient(`${endpoint_url}/${params.id}`, {\n        method: \"DELETE\",\n        body: JSON.stringify(params.data, filterNullValues),\n      }).then(({ json }) => ({\n        data: json,\n      }));\n    }\n  },\n\n  deleteMany: (resource, params) => {\n    console.log(\"deleteMany \" + resource, params);\n    const homeserver = localStorage.getItem(\"base_url\");\n    if (!homeserver || !(resource in resourceMap)) return Promise.reject();\n\n    const res = resourceMap[resource];\n\n    if (\"delete\" in res) {\n      return Promise.all(\n        params.ids.map(id => {\n          const del = res[\"delete\"]({ ...params, id: id });\n          const endpoint_url = homeserver + del.endpoint;\n          console.log(endpoint_url);\n          return jsonClient(endpoint_url, {\n            method: \"method\" in del ? del.method : \"DELETE\",\n            body: \"body\" in del ? JSON.stringify(del.body) : null,\n          });\n        })\n      ).then(responses => ({\n        data: responses.map(({ json }) => json),\n      }));\n    } else {\n      const endpoint_url = homeserver + res.path;\n      console.log(endpoint_url);\n      return Promise.all(\n        params.ids.map(id => {\n            console.log(id);\n            return jsonClient(`${endpoint_url}/${c_to_id(id, resource)}`, {\n              method: \"DELETE\",\n              body: JSON.stringify(params.data, filterNullValues),\n            })\n          }\n        )\n      ).then(responses => ({\n        data: responses.map(({ json }) => json),\n      }));\n    }\n  },\n};\n\nexport default dataProvider;\n","import React, { Fragment, useState } from \"react\";\nimport {\n  Button,\n  SaveButton,\n  SimpleForm,\n  TextInput,\n  Toolbar,\n  required,\n  useCreate,\n  useMutation,\n  useNotify,\n  useTranslate,\n  useUnselectAll,\n} from \"react-admin\";\nimport MessageIcon from \"@material-ui/icons/Message\";\nimport IconCancel from \"@material-ui/icons/Cancel\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\n\nconst ServerNoticeDialog = ({ open, loading, onClose, onSend }) => {\n  const translate = useTranslate();\n\n  const ServerNoticeToolbar = props => (\n    <Toolbar {...props}>\n      <SaveButton label=\"resources.servernotices.action.send\" />\n      <Button label=\"ra.action.cancel\" onClick={onClose}>\n        <IconCancel />\n      </Button>\n    </Toolbar>\n  );\n\n  return (\n    <Dialog open={open} onClose={onClose} loading={loading}>\n      <DialogTitle>\n        {translate(\"resources.servernotices.action.send\")}\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {translate(\"resources.servernotices.helper.send\")}\n        </DialogContentText>\n        <SimpleForm\n          toolbar={<ServerNoticeToolbar />}\n          submitOnEnter={false}\n          redirect={false}\n          save={onSend}\n        >\n          <TextInput\n            source=\"body\"\n            label=\"resources.servernotices.fields.body\"\n            fullWidth\n            multiline\n            rows=\"4\"\n            resettable\n            validate={required()}\n          />\n        </SimpleForm>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport const ServerNoticeButton = ({ record }) => {\n  const [open, setOpen] = useState(false);\n  const notify = useNotify();\n  const [create, { loading }] = useCreate(\"servernotices\");\n\n  const handleDialogOpen = () => setOpen(true);\n  const handleDialogClose = () => setOpen(false);\n\n  const handleSend = values => {\n    create(\n      { payload: { data: { id: record.id, ...values } } },\n      {\n        onSuccess: () => {\n          notify(\"resources.servernotices.action.send_success\");\n          handleDialogClose();\n        },\n        onFailure: () =>\n          notify(\"resources.servernotices.action.send_failure\", \"error\"),\n      }\n    );\n  };\n\n  return (\n    <Fragment>\n      <Button\n        label=\"resources.servernotices.send\"\n        onClick={handleDialogOpen}\n        disabled={loading}\n      >\n        <MessageIcon />\n      </Button>\n      <ServerNoticeDialog\n        open={open}\n        onClose={handleDialogClose}\n        onSend={handleSend}\n      />\n    </Fragment>\n  );\n};\n\nexport const ServerNoticeBulkButton = ({ selectedIds }) => {\n  const [open, setOpen] = useState(false);\n  const notify = useNotify();\n  const unselectAll = useUnselectAll();\n  const [createMany, { loading }] = useMutation();\n\n  const handleDialogOpen = () => setOpen(true);\n  const handleDialogClose = () => setOpen(false);\n\n  const handleSend = values => {\n    createMany(\n      {\n        type: \"createMany\",\n        resource: \"servernotices\",\n        payload: { ids: selectedIds, data: values },\n      },\n      {\n        onSuccess: ({ data }) => {\n          notify(\"resources.servernotices.action.send_success\");\n          unselectAll(\"users\");\n          handleDialogClose();\n        },\n        onFailure: error =>\n          notify(\"resources.servernotices.action.send_failure\", \"error\"),\n      }\n    );\n  };\n\n  return (\n    <Fragment>\n      <Button\n        label=\"resources.servernotices.send\"\n        onClick={handleDialogOpen}\n        disabled={loading}\n      >\n        <MessageIcon />\n      </Button>\n      <ServerNoticeDialog\n        open={open}\n        onClose={handleDialogClose}\n        onSend={handleSend}\n      />\n    </Fragment>\n  );\n};\n","import React, { Fragment, useState } from \"react\";\nimport {\n  Button,\n  useMutation,\n  useNotify,\n  Confirm,\n  useRefresh,\n} from \"react-admin\";\nimport ActionDelete from \"@material-ui/icons/Delete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { fade } from \"@material-ui/core/styles/colorManipulator\";\nimport classnames from \"classnames\";\n\nconst useStyles = makeStyles(\n  theme => ({\n    deleteButton: {\n      color: theme.palette.error.main,\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.error.main, 0.12),\n        // Reset on mouse devices\n        \"@media (hover: none)\": {\n          backgroundColor: \"transparent\",\n        },\n      },\n    },\n  }),\n  { name: \"RaDeleteDeviceButton\" }\n);\n\nexport const DeviceRemoveButton = props => {\n  const { record } = props;\n  const classes = useStyles(props);\n  const [open, setOpen] = useState(false);\n  const refresh = useRefresh();\n  const notify = useNotify();\n\n  const [removeDevice, { loading }] = useMutation();\n\n  if (!record) return null;\n\n  const handleClick = () => setOpen(true);\n  const handleDialogClose = () => setOpen(false);\n\n  const handleConfirm = () => {\n    removeDevice(\n      {\n        type: \"delete\",\n        resource: \"devices\",\n        payload: {\n          id: record.id,\n          user_id: record.user_id,\n        },\n      },\n      {\n        onSuccess: () => {\n          notify(\"resources.devices.action.erase.success\");\n          refresh();\n        },\n        onFailure: () =>\n          notify(\"resources.devices.action.erase.failure\", \"error\"),\n      }\n    );\n    setOpen(false);\n  };\n\n  return (\n    <Fragment>\n      <Button\n        label=\"ra.action.remove\"\n        onClick={handleClick}\n        className={classnames(\"ra-delete-button\", classes.deleteButton)}\n      >\n        <ActionDelete />\n      </Button>\n      <Confirm\n        isOpen={open}\n        loading={loading}\n        onConfirm={handleConfirm}\n        onClose={handleDialogClose}\n        title=\"resources.devices.action.erase.title\"\n        content=\"resources.devices.action.erase.content\"\n        translateOptions={{\n          id: record.id,\n          name: record.display_name ? record.display_name : record.id,\n        }}\n      />\n    </Fragment>\n  );\n};\n","import React, { cloneElement, Fragment } from \"react\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport PersonPinIcon from \"@material-ui/icons/PersonPin\";\nimport ContactMailIcon from \"@material-ui/icons/ContactMail\";\nimport DevicesIcon from \"@material-ui/icons/Devices\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport SettingsInputComponentIcon from \"@material-ui/icons/SettingsInputComponent\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport PermMediaIcon from \"@material-ui/icons/PermMedia\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport {\n  ArrayInput,\n  ArrayField,\n  Button,\n  Datagrid,\n  DateField,\n  Create,\n  Edit,\n  List,\n  Filter,\n  Toolbar,\n  SimpleForm,\n  SimpleFormIterator,\n  TabbedForm,\n  FormTab,\n  BooleanField,\n  BooleanInput,\n  PasswordInput,\n  TextField,\n  TextInput,\n  ReferenceField,\n  ReferenceManyField,\n  SearchInput,\n  SelectInput,\n  BulkDeleteButton,\n  DeleteButton,\n  SaveButton,\n  regex,\n  useRedirect,\n  useTranslate,\n  Pagination,\n  CreateButton,\n  ExportButton,\n  TopToolbar,\n  sanitizeListRestProps,\n  NumberField,\n} from \"react-admin\";\nimport { ServerNoticeButton, ServerNoticeBulkButton } from \"./ServerNotices\";\nimport { DeviceRemoveButton } from \"./devices\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst redirect = (basePath, id, data) => {\n  return {\n    pathname: \"/import_users\",\n  };\n};\n\nconst useStyles = makeStyles({\n  small: {\n    height: \"40px\",\n    width: \"40px\",\n  },\n  large: {\n    height: \"120px\",\n    width: \"120px\",\n    float: \"right\",\n  },\n});\n\nconst UserListActions = ({\n  currentSort,\n  className,\n  resource,\n  filters,\n  displayedFilters,\n  exporter, // you can hide ExportButton if exporter = (null || false)\n  filterValues,\n  permanentFilter,\n  hasCreate, // you can hide CreateButton if hasCreate = false\n  basePath,\n  selectedIds,\n  onUnselectItems,\n  showFilter,\n  maxResults,\n  total,\n  ...rest\n}) => {\n  const redirectTo = useRedirect();\n  return (\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\n      {filters &&\n        cloneElement(filters, {\n          resource,\n          showFilter,\n          displayedFilters,\n          filterValues,\n          context: \"button\",\n        })}\n      <CreateButton basePath={basePath} />\n      <ExportButton\n        disabled={total === 0}\n        resource={resource}\n        sort={currentSort}\n        filter={{ ...filterValues, ...permanentFilter }}\n        exporter={exporter}\n        maxResults={maxResults}\n      />\n      {/* Add your custom actions */}\n      <Button\n        onClick={() => {\n          redirectTo(redirect);\n        }}\n        label=\"CSV Import\"\n      >\n        <GetAppIcon style={{ transform: \"rotate(180deg)\", fontSize: \"20\" }} />\n      </Button>\n    </TopToolbar>\n  );\n};\n\nUserListActions.defaultProps = {\n  selectedIds: [],\n  onUnselectItems: () => null,\n};\n\nconst UserPagination = props => (\n  <Pagination {...props} rowsPerPageOptions={[10, 25, 50, 100, 500, 1000]} />\n);\n\nconst UserFilter = props => (\n  <Filter {...props}>\n    <SearchInput source=\"name\" alwaysOn />\n    <BooleanInput source=\"guests\" alwaysOn />\n    <BooleanInput\n      label=\"resources.users.fields.show_deactivated\"\n      source=\"deactivated\"\n      alwaysOn\n    />\n  </Filter>\n);\n\nconst UserBulkActionButtons = props => {\n  const translate = useTranslate();\n  return (\n    <Fragment>\n      <ServerNoticeBulkButton {...props} />\n      <BulkDeleteButton\n        {...props}\n        label=\"resources.users.action.erase\"\n        title={translate(\"resources.users.helper.erase\")}\n      />\n    </Fragment>\n  );\n};\n\nconst AvatarField = ({ source, className, record = {} }) => (\n  <Avatar src={record[source]} className={className} />\n);\n\nexport const UserList = props => {\n  const classes = useStyles();\n  return (\n    <List\n      {...props}\n      filters={<UserFilter />}\n      filterDefaultValues={{ guests: true, deactivated: false }}\n      actions={<UserListActions maxResults={10000} />}\n      bulkActionButtons={<UserBulkActionButtons />}\n      pagination={<UserPagination />}\n    >\n      <Datagrid rowClick=\"edit\">\n        <AvatarField\n          source=\"avatar_src\"\n          sortable={false}\n          className={classes.small}\n        />\n        <TextField source=\"id\" sortable={false} />\n        <TextField source=\"displayname\" sortable={false} />\n        <BooleanField source=\"is_guest\" sortable={false} />\n        <BooleanField source=\"admin\" sortable={false} />\n        <BooleanField source=\"deactivated\" sortable={false} />\n      </Datagrid>\n    </List>\n  );\n};\n\n// https://matrix.org/docs/spec/appendices#user-identifiers\nconst validateUser = regex(\n  /^[a-z0-9._=\\-/][a-z0-9._=\\-/][a-z0-9._=\\-/][a-z0-9._=\\-/][a-z0-9._=\\-/]+/,\n  \"synapseadmin.users.invalid_user_id\"\n);\n\nconst validateEmail = regex(\n  /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+\\.+([a-zA-Z0-9-][a-zA-Z0-9-]+)*$/,\n  \"Enter Proper Email Address\"  \n);\nexport function generateRandomUser() {\n  const homeserver = localStorage.getItem(\"home_server\");\n  const user_id =\n    \"@\" +\n    Array(8)\n      .fill(\"0123456789abcdefghijklmnopqrstuvwxyz\")\n      .map(\n        x =>\n          x[\n            Math.floor(\n              (crypto.getRandomValues(new Uint32Array(1))[0] /\n                (0xffffffff + 1)) *\n                x.length\n            )\n          ]\n      )\n      .join(\"\") +\n    \":\" +\n    homeserver;\n\n  const password = Array(20)\n    .fill(\n      \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~!@-#$\"\n    )\n    .map(\n      x =>\n        x[\n          Math.floor(\n            (crypto.getRandomValues(new Uint32Array(1))[0] / (0xffffffff + 1)) *\n              x.length\n          )\n        ]\n    )\n    .join(\"\");\n\n  return {\n    id: user_id,\n    password: password,\n  };\n}\n\nconst UserEditToolbar = props => {\n  const translate = useTranslate();\n  return (\n    <Toolbar {...props}>\n      <SaveButton submitOnEnter={true} />\n      <DeleteButton\n        label=\"resources.users.action.erase\"\n        title={translate(\"resources.users.helper.erase\")}\n      />\n      <ServerNoticeButton />\n    </Toolbar>\n  );\n};\n\nexport const UserCreate = props => (\n  <Create {...props}>\n    <SimpleForm>\n      <TextInput source=\"id\" autoComplete=\"off\" validate={validateUser} />\n      <TextInput source=\"displayname\" />\n      <PasswordInput source=\"password\" autoComplete=\"new-password\" />\n      <BooleanInput source=\"admin\" />\n      <TextInput source=\"email\" autoComplete=\"off\" validate={validateEmail}/>\n      <TextInput source=\"msisdn\" autoComplete=\"off\" />\n      {/* <ArrayInput source=\"threepids\">\n        <SimpleFormIterator>\n          <SelectInput\n            source=\"medium\"\n            choices={[\n              { id: \"email\", name: \"resources.users.email\" },\n              { id: \"msisdn\", name: \"resources.users.msisdn\" },\n            ]}\n            key=\"SelectInput\"\n          />\n          <TextInput source=\"address\" key=\"TextInput\"/>\n        </SimpleFormIterator>\n      </ArrayInput> */}\n    </SimpleForm>\n  </Create>\n);\n\nconst UserTitle = ({ record }) => {\n  const translate = useTranslate();\n  return (\n    <span>\n      {translate(\"resources.users.name\", {\n        smart_count: 1,\n      })}{\" \"}\n      {record ? `\"${record.displayname}\"` : \"\"}\n    </span>\n  );\n};\nexport const UserEdit = props => {\n  const classes = useStyles();\n  const translate = useTranslate();\n  return (\n    <Edit {...props} title={<UserTitle />}>\n      <TabbedForm toolbar={<UserEditToolbar />}>\n        <FormTab\n          label={translate(\"resources.users.name\", { smart_count: 1 })}\n          icon={<PersonPinIcon />}\n        >\n          <AvatarField\n            source=\"avatar_src\"\n            sortable={false}\n            className={classes.large}\n          />\n          <TextInput source=\"id\" disabled />\n          <TextInput source=\"displayname\" />\n          <PasswordInput source=\"password\" autoComplete=\"new-password\" />\n          <BooleanInput source=\"admin\" />\n          <BooleanInput\n            source=\"deactivated\"\n            helperText=\"resources.users.helper.deactivate\"\n          />\n          <DateField\n            source=\"creation_ts_ms\"\n            showTime\n            options={{\n              year: \"numeric\",\n              month: \"2-digit\",\n              day: \"2-digit\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              second: \"2-digit\",\n            }}\n          />\n          <TextField source=\"consent_version\" />\n        </FormTab>\n\n        <FormTab\n          label=\"resources.users.threepid\"\n          icon={<ContactMailIcon />}\n          path=\"threepid\"\n        >\n          <ArrayInput source=\"threepids\">\n            <SimpleFormIterator>\n              <SelectInput\n                source=\"medium\"\n                choices={[\n                  { id: \"email\", name: \"resources.users.email\" },\n                  { id: \"msisdn\", name: \"resources.users.msisdn\" },\n                ]}\n                key=\"SelectInput\"\n              />\n              <TextInput source=\"address\" key=\"TextInput\"/>\n            </SimpleFormIterator>\n          </ArrayInput>\n        </FormTab>\n\n        <FormTab\n          label={translate(\"resources.devices.name\", { smart_count: 2 })}\n          icon={<DevicesIcon />}\n          path=\"devices\"\n        >\n          <ReferenceManyField\n            reference=\"devices\"\n            target=\"user_id\"\n            addLabel={false}\n          >\n            <Datagrid style={{ width: \"100%\" }}>\n              <TextField source=\"device_id\" sortable={false} />\n              <TextField source=\"display_name\" sortable={false} />\n              <TextField source=\"last_seen_ip\" sortable={false} />\n              <DateField\n                source=\"last_seen_ts\"\n                showTime\n                options={{\n                  year: \"numeric\",\n                  month: \"2-digit\",\n                  day: \"2-digit\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  second: \"2-digit\",\n                }}\n                sortable={false}\n              />\n              <DeviceRemoveButton />\n            </Datagrid>\n          </ReferenceManyField>\n        </FormTab>\n\n        <FormTab\n          label=\"resources.connections.name\"\n          icon={<SettingsInputComponentIcon />}\n          path=\"connections\"\n        >\n          <ReferenceField\n            reference=\"connections\"\n            source=\"id\"\n            addLabel={false}\n            link={false}\n          >\n            <ArrayField\n              source=\"devices[].sessions[0].connections\"\n              label=\"resources.connections.name\"\n            >\n              <Datagrid style={{ width: \"100%\" }}>\n                <TextField source=\"ip\" sortable={false} />\n                <DateField\n                  source=\"last_seen\"\n                  showTime\n                  options={{\n                    year: \"numeric\",\n                    month: \"2-digit\",\n                    day: \"2-digit\",\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    second: \"2-digit\",\n                  }}\n                  sortable={false}\n                />\n                <TextField\n                  source=\"user_agent\"\n                  sortable={false}\n                  style={{ width: \"100%\" }}\n                />\n              </Datagrid>\n            </ArrayField>\n          </ReferenceField>\n        </FormTab>\n\n        <FormTab\n          label={translate(\"resources.users_media.name\", { smart_count: 2 })}\n          icon={<PermMediaIcon />}\n          path=\"media\"\n        >\n          <ReferenceManyField\n            reference=\"users_media\"\n            target=\"user_id\"\n            addLabel={false}\n            pagination={<UserPagination />}\n            perPage={50}\n          >\n            <Datagrid style={{ width: \"100%\" }}>\n              <DateField\n                source=\"created_ts\"\n                showTime\n                options={{\n                  year: \"numeric\",\n                  month: \"2-digit\",\n                  day: \"2-digit\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  second: \"2-digit\",\n                }}\n                sortable={false}\n              />\n              <DateField\n                source=\"last_access_ts\"\n                showTime\n                options={{\n                  year: \"numeric\",\n                  month: \"2-digit\",\n                  day: \"2-digit\",\n                  hour: \"2-digit\",\n                  minute: \"2-digit\",\n                  second: \"2-digit\",\n                }}\n                sortable={false}\n              />\n              <TextField source=\"media_id\" sortable={false} />\n              <NumberField source=\"media_length\" sortable={false} />\n              <TextField source=\"media_type\" sortable={false} />\n              <TextField source=\"upload_name\" sortable={false} />\n              <TextField source=\"quarantined_by\" sortable={false} />\n              <BooleanField source=\"safe_from_quarantine\" sortable={false} />\n              <DeleteButton undoable={false} redirect={false} />\n            </Datagrid>\n          </ReferenceManyField>\n        </FormTab>\n\n        <FormTab\n          label={translate(\"resources.rooms.name\", { smart_count: 2 })}\n          icon={<ViewListIcon />}\n          path=\"rooms\"\n        >\n          <ReferenceManyField\n            reference=\"joined_rooms\"\n            target=\"user_id\"\n            addLabel={false}\n          >\n            <Datagrid\n              style={{ width: \"100%\" }}\n              rowClick={(id, basePath, record) => \"/rooms/\" + id + \"/show\"}\n            >\n              <TextField\n                source=\"id\"\n                sortable={false}\n                label=\"resources.rooms.fields.room_id\"\n              />\n              <ReferenceField\n                label=\"resources.rooms.fields.name\"\n                source=\"id\"\n                reference=\"rooms\"\n                sortable={false}\n                link=\"\"\n              >\n                <TextField source=\"name\" sortable={false} />\n              </ReferenceField>\n            </Datagrid>\n          </ReferenceManyField>\n        </FormTab>\n\n        <FormTab\n          label={translate(\"resources.pushers.name\", { smart_count: 2 })}\n          icon={<NotificationsIcon />}\n          path=\"pushers\"\n        >\n          <ReferenceManyField\n            reference=\"pushers\"\n            target=\"user_id\"\n            addLabel={false}\n          >\n            <Datagrid style={{ width: \"100%\" }}>\n              <TextField source=\"kind\" sortable={false} />\n              <TextField source=\"app_display_name\" sortable={false} />\n              <TextField source=\"app_id\" sortable={false} />\n              <TextField source=\"data.url\" sortable={false} />\n              <TextField source=\"device_display_name\" sortable={false} />\n              <TextField source=\"lang\" sortable={false} />\n              <TextField source=\"profile_tag\" sortable={false} />\n              <TextField source=\"pushkey\" sortable={false} />\n            </Datagrid>\n          </ReferenceManyField>\n        </FormTab>\n      </TabbedForm>\n    </Edit>\n  );\n};\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  BooleanField,\n  BulkDeleteWithConfirmButton,\n  Datagrid,\n  DeleteButton,\n  Filter,\n  List,\n  Pagination,\n  ReferenceField,\n  ReferenceManyField,\n  SearchInput,\n  SelectField,\n  Show,\n  Tab,\n  TabbedShowLayout,\n  TextField,\n  TopToolbar,\n  useTranslate,\n} from \"react-admin\";\nimport get from \"lodash/get\";\nimport { Tooltip, Typography, Chip } from \"@material-ui/core\";\nimport HttpsIcon from \"@material-ui/icons/Https\";\nimport NoEncryptionIcon from \"@material-ui/icons/NoEncryption\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport UserIcon from \"@material-ui/icons/Group\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\n\nconst RoomPagination = props => (\n  <Pagination {...props} rowsPerPageOptions={[10, 25, 50, 100, 500, 1000]} />\n);\n\nconst EncryptionField = ({ source, record = {}, emptyText }) => {\n  const translate = useTranslate();\n  const value = get(record, source);\n  let ariaLabel = value === false ? \"ra.boolean.false\" : \"ra.boolean.true\";\n\n  if (value === false || value === true) {\n    return (\n      <Typography component=\"span\" variant=\"body2\">\n        <Tooltip title={translate(ariaLabel, { _: ariaLabel })}>\n          {value === true ? (\n            <HttpsIcon data-testid=\"true\" htmlColor=\"limegreen\" />\n          ) : (\n            <NoEncryptionIcon data-testid=\"false\" color=\"error\" />\n          )}\n        </Tooltip>\n      </Typography>\n    );\n  }\n\n  return (\n    <Typography component=\"span\" variant=\"body2\">\n      {emptyText}\n    </Typography>\n  );\n};\n\nconst RoomTitle = ({ record }) => {\n  const translate = useTranslate();\n  var name = \"\";\n  if (record) {\n    name = record.name !== \"\" ? record.name : record.id;\n  }\n\n  return (\n    <span>\n      {translate(\"resources.rooms.name\", 1)} {name}\n    </span>\n  );\n};\n\nconst RoomShowActions = ({ basePath, data, resource }) => {\n  const translate = useTranslate();\n  return (\n    <TopToolbar>\n      <DeleteButton\n        basePath={basePath}\n        record={data}\n        resource={resource}\n        undoable={false}\n        confirmTitle={translate(\"synapseadmin.rooms.delete.title\")}\n        confirmContent={translate(\"synapseadmin.rooms.delete.message\")}\n      />\n    </TopToolbar>\n  );\n};\n\nexport const RoomShow = props => {\n  const translate = useTranslate();\n  return (\n    <Show {...props} actions={<RoomShowActions />} title={<RoomTitle />}>\n      <TabbedShowLayout>\n        <Tab label=\"synapseadmin.rooms.tabs.basic\" icon={<ViewListIcon />}>\n          <TextField source=\"room_id\" />\n          <TextField source=\"name\" />\n          <TextField source=\"canonical_alias\" />\n          <TextField source=\"creator\" />\n        </Tab>\n\n        <Tab\n          label=\"synapseadmin.rooms.tabs.detail\"\n          icon={<PageviewIcon />}\n          path=\"detail\"\n        >\n          <TextField source=\"joined_members\" />\n          <TextField source=\"joined_local_members\" />\n          <TextField source=\"state_events\" />\n          <TextField source=\"version\" />\n          <TextField\n            source=\"encryption\"\n            emptyText={translate(\"resources.rooms.enums.unencrypted\")}\n          />\n        </Tab>\n\n        <Tab label=\"synapseadmin.rooms.tabs.members\" icon={<UserIcon />}>\n          <ReferenceManyField\n            reference=\"room_members\"\n            target=\"room_id\"\n            addLabel={false}\n          >\n            <Datagrid\n              style={{ width: \"100%\" }}\n              rowClick={(id, basePath, record) => \"/users/\" + id}\n            >\n              <TextField\n                source=\"id\"\n                sortable={false}\n                label=\"resources.users.fields.id\"\n              />\n              <ReferenceField\n                label=\"resources.users.fields.displayname\"\n                source=\"id\"\n                reference=\"users\"\n                sortable={false}\n                link=\"\"\n              >\n                <TextField source=\"displayname\" sortable={false} />\n              </ReferenceField>\n            </Datagrid>\n          </ReferenceManyField>\n        </Tab>\n\n        <Tab\n          label=\"synapseadmin.rooms.tabs.permission\"\n          icon={<VisibilityIcon />}\n          path=\"permission\"\n        >\n          <BooleanField source=\"federatable\" />\n          <BooleanField source=\"public\" />\n          <SelectField\n            source=\"join_rules\"\n            choices={[\n              { id: \"public\", name: \"resources.rooms.enums.join_rules.public\" },\n              { id: \"knock\", name: \"resources.rooms.enums.join_rules.knock\" },\n              { id: \"invite\", name: \"resources.rooms.enums.join_rules.invite\" },\n              {\n                id: \"private\",\n                name: \"resources.rooms.enums.join_rules.private\",\n              },\n            ]}\n          />\n          <SelectField\n            source=\"guest_access\"\n            choices={[\n              {\n                id: \"can_join\",\n                name: \"resources.rooms.enums.guest_access.can_join\",\n              },\n              {\n                id: \"forbidden\",\n                name: \"resources.rooms.enums.guest_access.forbidden\",\n              },\n            ]}\n          />\n          <SelectField\n            source=\"history_visibility\"\n            choices={[\n              {\n                id: \"invited\",\n                name: \"resources.rooms.enums.history_visibility.invited\",\n              },\n              {\n                id: \"joined\",\n                name: \"resources.rooms.enums.history_visibility.joined\",\n              },\n              {\n                id: \"shared\",\n                name: \"resources.rooms.enums.history_visibility.shared\",\n              },\n              {\n                id: \"world_readable\",\n                name: \"resources.rooms.enums.history_visibility.world_readable\",\n              },\n            ]}\n          />\n        </Tab>\n      </TabbedShowLayout>\n    </Show>\n  );\n};\n\nconst RoomBulkActionButtons = props => (\n  <Fragment>\n    <BulkDeleteWithConfirmButton {...props} />\n  </Fragment>\n);\n\nconst RoomFilter = ({ ...props }) => {\n  const translate = useTranslate();\n  return (\n    <Filter {...props}>\n      <SearchInput source=\"search_term\" alwaysOn />\n      <Chip\n        label={translate(\"resources.rooms.fields.joined_local_members\")}\n        source=\"joined_local_members\"\n        defaultValue={false}\n        style={{ marginBottom: 8 }}\n      />\n      <Chip\n        label={translate(\"resources.rooms.fields.state_events\")}\n        source=\"state_events\"\n        defaultValue={false}\n        style={{ marginBottom: 8 }}\n      />\n      <Chip\n        label={translate(\"resources.rooms.fields.version\")}\n        source=\"version\"\n        defaultValue={false}\n        style={{ marginBottom: 8 }}\n      />\n      <Chip\n        label={translate(\"resources.rooms.fields.federatable\")}\n        source=\"federatable\"\n        defaultValue={false}\n        style={{ marginBottom: 8 }}\n      />\n    </Filter>\n  );\n};\n\nconst FilterableRoomList = ({ ...props }) => {\n  const filter = props.roomfilters;\n  const localMembersFilter =\n    filter && filter.joined_local_members ? true : false;\n  const stateEventsFilter = filter && filter.state_events ? true : false;\n  const versionFilter = filter && filter.version ? true : false;\n  const federateableFilter = filter && filter.federatable ? true : false;\n  const translate = useTranslate();\n\n  return (\n    <List\n      {...props}\n      pagination={<RoomPagination />}\n      sort={{ field: \"name\", order: \"ASC\" }}\n      filters={<RoomFilter />}\n      bulkActionButtons={\n        <RoomBulkActionButtons\n          confirmTitle={translate(\"synapseadmin.rooms.delete.title\")}\n          confirmContent={translate(\"synapseadmin.rooms.delete.message\")}\n        />\n      }\n    >\n      <Datagrid rowClick=\"show\">\n        <EncryptionField\n          source=\"is_encrypted\"\n          sortBy=\"encryption\"\n          label={<HttpsIcon />}\n        />\n        <TextField source=\"name\" />\n        <TextField source=\"joined_members\" />\n        {localMembersFilter && <TextField source=\"joined_local_members\" />}\n        {stateEventsFilter && <TextField source=\"state_events\" />}\n        {versionFilter && <TextField source=\"version\" />}\n        {federateableFilter && <BooleanField source=\"federatable\" />}\n        <BooleanField source=\"public\" />\n      </Datagrid>\n    </List>\n  );\n};\n\nfunction mapStateToProps(state) {\n  return {\n    roomfilters: state.admin.resources.rooms.list.params.displayedFilters,\n  };\n}\n\nexport const RoomList = connect(mapStateToProps)(FilterableRoomList);\n","import React from \"react\";\nimport {\n  Datagrid,\n  DateField,\n  List,\n  NumberField,\n  Pagination,\n  ReferenceField,\n  Show,\n  Tab,\n  TabbedShowLayout,\n  TextField,\n  useTranslate,\n} from \"react-admin\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\nimport ViewListIcon from \"@material-ui/icons/ViewList\";\n\nconst ReportPagination = props => (\n  <Pagination {...props} rowsPerPageOptions={[10, 25, 50, 100, 500, 1000]} />\n);\n\nexport const ReportShow = props => {\n  const translate = useTranslate();\n  return (\n    <Show {...props}>\n      <TabbedShowLayout>\n        <Tab\n          label={translate(\"synapseadmin.reports.tabs.basic\", {\n            smart_count: 1,\n          })}\n          icon={<ViewListIcon />}\n        >\n          <DateField\n            source=\"received_ts\"\n            showTime\n            options={{\n              year: \"numeric\",\n              month: \"2-digit\",\n              day: \"2-digit\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              second: \"2-digit\",\n            }}\n            sortable={true}\n          />\n          <ReferenceField source=\"user_id\" reference=\"users\">\n            <TextField source=\"id\" />\n          </ReferenceField>\n          <NumberField source=\"score\" />\n          <TextField source=\"reason\" />\n          <TextField source=\"name\" />\n          <TextField\n            source=\"canonical_alias\"\n            label=\"resources.rooms.fields.canonical_alias\"\n          />\n          <ReferenceField\n            source=\"room_id\"\n            reference=\"rooms\"\n            link=\"show\"\n            label=\"resources.rooms.fields.room_id\"\n          >\n            <TextField source=\"id\" />\n          </ReferenceField>\n        </Tab>\n\n        <Tab\n          label=\"synapseadmin.reports.tabs.detail\"\n          icon={<PageviewIcon />}\n          path=\"detail\"\n        >\n          {\" \"}\n          <DateField\n            source=\"event_json.origin_server_ts\"\n            showTime\n            options={{\n              year: \"numeric\",\n              month: \"2-digit\",\n              day: \"2-digit\",\n              hour: \"2-digit\",\n              minute: \"2-digit\",\n              second: \"2-digit\",\n            }}\n            sortable={true}\n          />\n          <ReferenceField source=\"sender\" reference=\"users\">\n            <TextField source=\"id\" />\n          </ReferenceField>\n          <TextField source=\"event_id\" />\n          <TextField source=\"event_json.origin\" />\n          <TextField source=\"event_json.type\" />\n          <TextField source=\"event_json.content.msgtype\" />\n          <TextField source=\"event_json.content.body\" />\n          <TextField source=\"event_json.content.format\" />\n          <TextField source=\"event_json.content.formatted_body\" />\n          <TextField source=\"event_json.content.algorithm\" />\n          <TextField\n            source=\"event_json.content.device_id\"\n            label=\"resources.users.fields.device_id\"\n          />\n        </Tab>\n      </TabbedShowLayout>\n    </Show>\n  );\n};\n\nexport const ReportList = ({ ...props }) => {\n  return (\n    <List\n      {...props}\n      pagination={<ReportPagination />}\n      sort={{ field: \"received_ts\", order: \"DESC\" }}\n      bulkActionButtons={false}\n    >\n      <Datagrid rowClick=\"show\">\n        <TextField source=\"id\" sortable={false} />\n        <DateField\n          source=\"received_ts\"\n          showTime\n          options={{\n            year: \"numeric\",\n            month: \"2-digit\",\n            day: \"2-digit\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            second: \"2-digit\",\n          }}\n          sortable={true}\n        />\n        <TextField sortable={false} source=\"user_id\" />\n        <TextField sortable={false} source=\"name\" />\n        <TextField sortable={false} source=\"score\" />\n      </Datagrid>\n    </List>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport {\n  fetchUtils,\n  FormDataConsumer,\n  Notification,\n  useLogin,\n  useNotify,\n  // useLocale,\n  // useSetLocale,\n  useTranslate,\n  PasswordInput,\n  TextInput,\n} from \"react-admin\";\nimport { Form, useForm } from \"react-final-form\";\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardActions,\n  CircularProgress,\n  // MenuItem,\n  // Select,\n  TextField,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport LockIcon from \"@material-ui/icons/Lock\";\n\nconst useStyles = makeStyles(theme => ({\n  main: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    minHeight: \"calc(100vh - 1em)\",\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    background: \"url(./images/floating-cogs.svg)\",\n    backgroundColor: \"#f9f9f9\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n  },\n  card: {\n    minWidth: \"30em\",\n    marginTop: \"6em\",\n    marginBottom: \"6em\",\n  },\n  avatar: {\n    margin: \"1em\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  icon: {\n    backgroundColor: theme.palette.secondary.main,\n  },\n  hint: {\n    marginTop: \"1em\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    color: theme.palette.grey[500],\n  },\n  form: {\n    padding: \"0 1em 1em 1em\",\n  },\n  input: {\n    marginTop: \"1em\",\n  },\n  actions: {\n    padding: \"0 1em 1em 1em\",\n  },\n  serverVersion: {\n    color: \"#9e9e9e\",\n    fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\n    marginBottom: \"1em\",\n    marginLeft: \"0.5em\",\n  },\n}));\n\nconst LoginPage = ({ theme }) => {\n  const classes = useStyles({ theme });\n  const login = useLogin();\n  const notify = useNotify();\n  const [loading, setLoading] = useState(false);\n  // var locale = useLocale();\n  // const setLocale = useSetLocale();\n  const translate = useTranslate();\n  const base_url = \"https://m.navgurukul.org\";\n\n  const renderInput = ({\n    meta: { touched, error } = {},\n    input: { ...inputProps },\n    ...props\n  }) => (\n    <TextField\n      error={!!(touched && error)}\n      helperText={touched && error}\n      {...inputProps}\n      {...props}\n      fullWidth\n    />\n  );\n\n  const validate = values => {\n    const errors = {};\n    if (!values.username) {\n      errors.username = translate(\"ra.validation.required\");\n    }\n    if (!values.password) {\n      errors.password = translate(\"ra.validation.required\");\n    }\n    if (!values.base_url) {\n      errors.base_url = translate(\"ra.validation.required\");\n    } else {\n      if (!values.base_url.match(/^(http|https):\\/\\//)) {\n        errors.base_url = translate(\"synapseadmin.auth.protocol_error\");\n      } else if (\n        !values.base_url.match(/^(http|https):\\/\\/[a-zA-Z0-9\\-.]+(:\\d{1,5})?$/)\n      ) {\n        errors.base_url = translate(\"synapseadmin.auth.url_error\");\n      }\n    }\n    return errors;\n  };\n\n  const handleSubmit = auth => {\n    setLoading(true);\n    login(auth).catch(error => {\n      setLoading(false);\n      notify(\n        typeof error === \"string\"\n          ? error\n          : typeof error === \"undefined\" || !error.message\n          ? \"ra.auth.sign_in_error\"\n          : error.message,\n        \"warning\"\n      );\n    });\n  };\n\n  const extractHomeServer = username => {\n    const usernameRegex = /@[a-zA-Z0-9._=\\-/]+:([a-zA-Z0-9\\-.]+\\.[a-zA-Z]+)/;\n    if (!username) return null;\n    const res = username.match(usernameRegex);\n    if (res) return res[1];\n    return null;\n  };\n\n  const UserData = ({ formData }) => {\n\n    const form = useForm();\n    const [serverVersion, setServerVersion] = useState(\"\");\n\n    const handleUsernameChange = _ => {\n      if (formData.base_url) return;\n      // check if username is a full qualified userId then set base_url accordially\n      const home_server = extractHomeServer(formData.username);\n      const wellKnownUrl = `https://${home_server}/.well-known/matrix/client`;\n      if (home_server) {\n        // fetch .well-known entry to get base_url\n        fetchUtils\n          .fetchJson(wellKnownUrl, { method: \"GET\" })\n          .then(({ json }) => {\n            form.change(\"base_url\", json[\"m.homeserver\"].base_url);\n          })\n          .catch(_ => {\n            // if there is no .well-known entry, try the home server name\n            form.change(\"base_url\", `https://${home_server}`);\n          });\n      }\n    };\n\n    useEffect(\n      _ => {\n        if (\n          !formData.base_url ||\n          !formData.base_url.match(/^(http|https):\\/\\/[a-zA-Z0-9\\-.]+$/)\n        )\n          return;\n        const versionUrl = `${formData.base_url}/_synapse/admin/v1/server_version`;\n        fetchUtils\n          .fetchJson(versionUrl, { method: \"GET\" })\n          .then(({ json }) => {\n            setServerVersion(\n              `${translate(\"synapseadmin.auth.server_version\")} ${\n                json[\"server_version\"]\n              }`\n            );\n          })\n          .catch(_ => {\n            setServerVersion(\"\");\n          });\n      },\n      [formData.base_url]\n    );\n\n    return (\n      <div>\n        <div className={classes.input}>\n          <TextInput\n            autoFocus\n            name=\"username\"\n            component={renderInput}\n            label={translate(\"ra.auth.username\")}\n            disabled={loading}\n            onBlur={handleUsernameChange}\n            fullWidth\n          />\n        </div>\n        <div className={classes.input}>\n          <PasswordInput\n            name=\"password\"\n            component={renderInput}\n            label={translate(\"ra.auth.password\")}\n            type=\"password\"\n            disabled={loading}\n            fullWidth\n          />\n        </div>\n        <div className={classes.input}>\n          <TextInput\n            name=\"base_url\"\n            component={renderInput}\n            label={translate(\"synapseadmin.auth.base_url\")}\n            disabled={loading}\n            fullWidth\n          />\n        </div>\n        <div className={classes.serverVersion}>{serverVersion}</div>\n      </div>\n    );\n  };\n\n  return (\n    <Form\n      initialValues={{ base_url: base_url }}\n      onSubmit={handleSubmit}\n      validate={validate}\n      render={({ handleSubmit }) => (\n        <form onSubmit={handleSubmit} noValidate>\n          <div className={classes.main}>\n            <Card className={classes.card}>\n              <div className={classes.avatar}>\n                <Avatar className={classes.icon}>\n                  <LockIcon />\n                </Avatar>\n              </div>\n              <div className={classes.hint}>\n                {translate(\"synapseadmin.auth.welcome\")}\n              </div>\n              <div className={classes.form}>\n                <FormDataConsumer>\n                  {formDataProps => <UserData {...formDataProps} />}\n                </FormDataConsumer>\n              </div>\n              <CardActions className={classes.actions}>\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  color=\"primary\"\n                  disabled={loading}\n                  className={classes.button}\n                  fullWidth\n                >\n                  {loading && <CircularProgress size={25} thickness={2} />}\n                  {translate(\"ra.auth.sign_in\")}\n                </Button>\n              </CardActions>\n            </Card>\n            <Notification />\n          </div>\n        </form>\n      )}\n    />\n  );\n};\n\nexport default LoginPage;\n","import React from \"react\";\nimport {\n  Datagrid,\n  Filter,\n  List,\n  NumberField,\n  TextField,\n  SearchInput,\n  Pagination,\n} from \"react-admin\";\n\nconst UserMediaStatsPagination = props => (\n  <Pagination {...props} rowsPerPageOptions={[10, 25, 50, 100, 500, 1000]} />\n);\n\nconst UserMediaStatsFilter = props => (\n  <Filter {...props}>\n    <SearchInput source=\"search_term\" alwaysOn />\n  </Filter>\n);\n\nexport const UserMediaStatsList = props => {\n  return (\n    <List\n      {...props}\n      filters={<UserMediaStatsFilter />}\n      pagination={<UserMediaStatsPagination />}\n      sort={{ field: \"media_length\", order: \"DESC\" }}\n      bulkActionButtons={false}\n    >\n      <Datagrid rowClick={(id, basePath, record) => \"/users/\" + id + \"/media\"}>\n        <TextField source=\"user_id\" label=\"resources.users.fields.id\" />\n        <TextField\n          source=\"displayname\"\n          label=\"resources.users.fields.displayname\"\n        />\n        <NumberField source=\"media_count\" />\n        <NumberField source=\"media_length\" />\n      </Datagrid>\n    </List>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Button as ReactAdminButton,\n  useDataProvider,\n  useNotify,\n  Title,\n} from \"react-admin\";\nimport { parse as parseCsv, unparse as unparseCsv } from \"papaparse\";\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\nimport {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CardHeader,\n  FormControlLabel,\n  Checkbox,\n  NativeSelect,\n} from \"@material-ui/core\";\nimport { useTranslate } from \"ra-core\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { generateRandomUser } from \"./users\";\n\nconst LOGGING = true;\n\nexport const ImportButton = ({ label, variant = \"text\" }) => {\n  return (\n    <ReactAdminButton\n      color=\"primary\"\n      component=\"span\"\n      variant={variant}\n      label={label}\n    >\n      <GetAppIcon style={{ transform: \"rotate(180deg)\", fontSize: \"20\" }} />\n    </ReactAdminButton>\n  );\n};\n\nconst expectedFields = [\"id\", \"displayname\"].sort();\nconst optionalFields = [\n  \"user_type\",\n  \"guest\",\n  \"admin\",\n  \"deactivated\",\n  \"avatar_url\",\n  \"password\",\n].sort();\n\nfunction TranslatableOption({ value, text }) {\n  const translate = useTranslate();\n  return <option value={value}>{translate(text)}</option>;\n}\n\nconst FilePicker = props => {\n  const [values, setValues] = useState(null);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState(null);\n  const [dryRun, setDryRun] = useState(true);\n\n  const [progress, setProgress] = useState(null);\n\n  const [importResults, setImportResults] = useState(null);\n  const [skippedRecords, setSkippedRecords] = useState(null);\n\n  const [conflictMode, setConflictMode] = useState(\"stop\");\n  const [passwordMode, setPasswordMode] = useState(true);\n  const [useridMode, setUseridMode] = useState(\"ignore\");\n\n  const translate = useTranslate();\n  const notify = useNotify();\n\n  const dataProvider = useDataProvider();\n\n  const onFileChange = async e => {\n    if (progress !== null) return;\n\n    setValues(null);\n    setError(null);\n    setStats(null);\n    setImportResults(null);\n    const file = e.target.files ? e.target.files[0] : null;\n    /* Let's refuse some unreasonably big files instead of freezing\n     * up the browser */\n    if (file.size > 100000000) {\n      const message = translate(\"import_users.errors.unreasonably_big\", {\n        size: (file.size / (1024 * 1024)).toFixed(2),\n      });\n      notify(message);\n      setError(message);\n      return;\n    }\n    try {\n      parseCsv(file, {\n        header: true,\n        skipEmptyLines: true /* especially for a final EOL in the csv file */,\n        complete: result => {\n          if (result.error) {\n            setError(result.error);\n          }\n          /* Papaparse is very lenient, we may be able to salvage\n           * the data in the file. */\n          verifyCsv(result, { setValues, setStats, setError });\n        },\n      });\n    } catch {\n      setError(true);\n      return null;\n    }\n  };\n\n  const verifyCsv = (\n    { data, meta, errors },\n    { setValues, setStats, setError }\n  ) => {\n    /* First, verify the presence of required fields */\n    let eF = Array.from(expectedFields);\n    let oF = Array.from(optionalFields);\n\n    meta.fields.forEach(name => {\n      if (eF.includes(name)) {\n        eF = eF.filter(v => v !== name);\n      }\n      if (oF.includes(name)) {\n        oF = oF.filter(v => v !== name);\n      }\n    });\n\n    if (eF.length !== 0) {\n      setError(\n        translate(\"import_users.error.required_field\", { field: eF[0] })\n      );\n      return false;\n    }\n\n    // XXX after deciding on how \"name\" and friends should be handled below,\n    //     this place will want changes, too.\n\n    /* Collect some stats to prevent sneaky csv files from adding admin\n       users or something.\n     */\n    let stats = {\n      user_types: { default: 0 },\n      is_guest: 0,\n      admin: 0,\n      deactivated: 0,\n      password: 0,\n      avatar_url: 0,\n      id: 0,\n\n      total: data.length,\n    };\n\n    data.forEach((line, idx) => {\n      if (line.user_type === undefined || line.user_type === \"\") {\n        stats.user_types.default++;\n      } else {\n        stats.user_types[line.user_type] += 1;\n      }\n      /* XXX correct the csv export that react-admin offers for the users\n       * resource so it gives sensible field names and doesn't duplicate\n       * id as \"name\"?\n       */\n      if (meta.fields.includes(\"name\")) {\n        delete line.name;\n      }\n      if (meta.fields.includes(\"user_type\")) {\n        delete line.user_type;\n      }\n      if (meta.fields.includes(\"is_admin\")) {\n        line.admin = line.is_admin;\n        delete line.is_admin;\n      }\n\n      [\"is_guest\", \"admin\", \"deactivated\"].forEach(f => {\n        if (line[f] === \"true\") {\n          stats[f]++;\n          line[f] = true; // we need true booleans instead of strings\n        } else {\n          if (line[f] !== \"false\" && line[f] !== \"\") {\n            errors.push(\n              translate(\"import_users.error.invalid_value\", {\n                field: f,\n                row: idx,\n              })\n            );\n          }\n          line[f] = false; // default values to false\n        }\n      });\n\n      if (line.password !== undefined && line.password !== \"\") {\n        stats.password++;\n      }\n\n      if (line.avatar_url !== undefined && line.avatar_url !== \"\") {\n        stats.avatar_url++;\n      }\n\n      if (line.id !== undefined && line.id !== \"\") {\n        stats.id++;\n      }\n    });\n\n    if (errors.length > 0) {\n      setError(errors);\n    }\n    setStats(stats);\n    setValues(data);\n\n    return true;\n  };\n\n  const runImport = async e => {\n    if (progress !== null) {\n      notify(\"import_users.errors.already_in_progress\");\n      return;\n    }\n\n    const results = await doImport(\n      dataProvider,\n      values,\n      conflictMode,\n      passwordMode,\n      useridMode,\n      dryRun,\n      setProgress,\n      setError\n    );\n    setImportResults(results);\n    // offer CSV download of skipped or errored records\n    // (so that the user doesn't have to filter out successful\n    // records manually when fixing stuff in the CSV)\n    setSkippedRecords(unparseCsv(results.skippedRecords));\n    if (LOGGING) console.log(\"Skipped records:\");\n    if (LOGGING) console.log(skippedRecords);\n  };\n\n  // XXX every single one of the requests will restart the activity indicator\n  //     which doesn't look very good.\n\n  const doImport = async (\n    dataProvider,\n    data,\n    conflictMode,\n    passwordMode,\n    useridMode,\n    dryRun,\n    setProgress,\n    setError\n  ) => {\n    let skippedRecords = [];\n    let erroredRecords = [];\n    let succeededRecords = [];\n    let changeStats = {\n      toAdmin: 0,\n      toGuest: 0,\n      toRegular: 0,\n      replacedPassword: 0,\n    };\n    let entriesDone = 0;\n    let entriesCount = data.length;\n    try {\n      setProgress({ done: entriesDone, limit: entriesCount });\n      for (const entry of data) {\n        let userRecord = {};\n        let overwriteData = {};\n        // No need to do a bunch of cryptographic random number getting if\n        // we are using neither a generated password nor a generated user id.\n        if (\n          useridMode === \"ignore\" ||\n          entry.id === undefined ||\n          entry.password === undefined ||\n          passwordMode === false\n        ) {\n          overwriteData = generateRandomUser();\n          // Ignoring IDs or the entry lacking an ID means we keep the\n          // ID field in the overwrite data.\n          if (!(useridMode === \"ignore\" || entry.id === undefined)) {\n            delete overwriteData.id;\n          }\n\n          // Not using passwords from the csv or this entry lacking a password\n          // means we keep the password field in the overwrite data.\n          if (\n            !(\n              passwordMode === false ||\n              entry.password === undefined ||\n              entry.password === \"\"\n            )\n          ) {\n            delete overwriteData.password;\n          }\n        }\n        /* TODO record update stats (especially admin no -> yes, deactivated x -> !x, ... */\n        Object.assign(userRecord, entry);\n        Object.assign(userRecord, overwriteData);\n\n        /* For these modes we will consider the ID that's in the record.\n         * If the mode is \"stop\", we will not continue adding more records, and\n         * we will offer information on what was already added and what was\n         * skipped.\n         *\n         * If the mode is \"skip\", we record the record for later, but don't\n         * send it to the server.\n         *\n         * If the mode is \"update\", we change fields that are reasonable to\n         * update.\n         *  - If the \"password mode\" is \"true\" (i.e. \"use passwords from csv\"):\n         *    - if the record has a password\n         *      - send the password along with the record\n         *    - if the record has no password\n         *      - generate a new password\n         *  - If the \"password mode\" is \"false\"\n         *    - never generate a new password to update existing users with\n         */\n\n        /* We just act as if there are no IDs in the CSV, so every user will be\n         * created anew.\n         * We do a simple retry loop so that an accidental hit on an existing ID\n         * doesn't trip us up.\n         */\n        if (LOGGING)\n          console.log(\n            \"will check for existence of record \" + JSON.stringify(userRecord)\n          );\n        let retries = 0;\n        const submitRecord = recordData => {\n          return dataProvider.getOne(\"users\", { id: recordData.id }).then(\n            async alreadyExists => {\n              if (LOGGING) console.log(\"already existed\");\n\n              if (useridMode === \"update\" || conflictMode === \"skip\") {\n                skippedRecords.push(recordData);\n              } else if (conflictMode === \"stop\") {\n                throw new Error(\n                  translate(\"import_users.error.id_exits\", {\n                    id: recordData.id,\n                  })\n                );\n              } else {\n                const overwriteData = generateRandomUser();\n                const newRecordData = Object.assign({}, recordData, {\n                  id: overwriteData.id,\n                });\n                retries++;\n                if (retries > 512) {\n                  console.warn(\"retry loop got stuck? pathological situation?\");\n                  skippedRecords.push(recordData);\n                } else {\n                  await submitRecord(newRecordData);\n                }\n              }\n            },\n            async okToSubmit => {\n              if (LOGGING)\n                console.log(\n                  \"OK to create record \" +\n                    recordData.id +\n                    \" (\" +\n                    recordData.displayname +\n                    \").\"\n                );\n\n              if (!dryRun) {\n                await dataProvider.create(\"users\", { data: recordData });\n              }\n              succeededRecords.push(recordData);\n            }\n          );\n        };\n\n        await submitRecord(userRecord);\n        entriesDone++;\n        setProgress({ done: entriesDone, limit: data.length });\n      }\n\n      setProgress(null);\n    } catch (e) {\n      setError(\n        translate(\"import_users.error.at_entry\", {\n          entry: entriesDone + 1,\n          message: e.message,\n        })\n      );\n      setProgress(null);\n    }\n    return {\n      skippedRecords,\n      erroredRecords,\n      succeededRecords,\n      totalRecordCount: entriesCount,\n      changeStats,\n      wasDryRun: dryRun,\n    };\n  };\n\n  const downloadSkippedRecords = () => {\n    const element = document.createElement(\"a\");\n    console.log(skippedRecords);\n    const file = new Blob([skippedRecords], {\n      type: \"text/comma-separated-values\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"skippedRecords.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n\n  const onConflictModeChanged = async e => {\n    if (progress !== null) {\n      return;\n    }\n\n    const value = e.target.value;\n    setConflictMode(value);\n  };\n\n  const onPasswordModeChange = e => {\n    if (progress !== null) {\n      return;\n    }\n\n    setPasswordMode(e.target.checked);\n  };\n\n  const onUseridModeChanged = async e => {\n    if (progress !== null) {\n      return;\n    }\n\n    const value = e.target.value;\n    setUseridMode(value);\n  };\n\n  const onDryRunModeChanged = ev => {\n    if (progress !== null) {\n      return;\n    }\n    setDryRun(ev.target.checked);\n  };\n\n  // render individual small components\n\n  const statsCards = stats &&\n    !importResults && [\n      <Container>\n        <CardHeader\n          title={translate(\"import_users.cards.importstats.header\")}\n        />\n        <CardContent>\n          <div>\n            {translate(\n              \"import_users.cards.importstats.users_total\",\n              stats.total\n            )}\n          </div>\n          <div>\n            {translate(\n              \"import_users.cards.importstats.guest_count\",\n              stats.is_guest\n            )}\n          </div>\n          <div>\n            {translate(\n              \"import_users.cards.importstats.admin_count\",\n              stats.admin\n            )}\n          </div>\n        </CardContent>\n      </Container>,\n      <Container>\n        <CardHeader title={translate(\"import_users.cards.ids.header\")} />\n        <CardContent>\n          <div>\n            {stats.id === stats.total\n              ? translate(\"import_users.cards.ids.all_ids_present\")\n              : translate(\"import_users.cards.ids.count_ids_present\", stats.id)}\n          </div>\n          {stats.id > 0 ? (\n            <div>\n              <NativeSelect\n                onChange={onUseridModeChanged}\n                value={useridMode}\n                enabled={(progress !== null).toString()}\n              >\n                <TranslatableOption\n                  value=\"ignore\"\n                  text=\"import_users.cards.ids.mode.ignore\"\n                />\n                <TranslatableOption\n                  value=\"update\"\n                  text=\"import_users.cards.ids.mode.update\"\n                />\n              </NativeSelect>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </CardContent>\n      </Container>,\n      <Container>\n        <CardHeader title={translate(\"import_users.cards.passwords.header\")} />\n        <CardContent>\n          <div>\n            {stats.password === stats.total\n              ? translate(\"import_users.cards.passwords.all_passwords_present\")\n              : translate(\n                  \"import_users.cards.passwords.count_passwords_present\",\n                  stats.password\n                )}\n          </div>\n          {stats.password > 0 ? (\n            <div>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={passwordMode}\n                    enabled={(progress !== null).toString()}\n                    onChange={onPasswordModeChange}\n                  />\n                }\n                label={translate(\"import_users.cards.passwords.use_passwords\")}\n              />\n            </div>\n          ) : (\n            \"\"\n          )}\n        </CardContent>\n      </Container>,\n    ];\n\n  let conflictCards = stats && !importResults && (\n    <Container>\n      <CardHeader title={translate(\"import_users.cards.conflicts.header\")} />\n      <CardContent>\n        <div>\n          <NativeSelect\n            onChange={onConflictModeChanged}\n            value={conflictMode}\n            enabled={(progress !== null).toString()}\n          >\n            <TranslatableOption\n              value=\"stop\"\n              text=\"import_users.cards.conflicts.mode.stop\"\n            />\n            <TranslatableOption\n              value=\"skip\"\n              text=\"import_users.cards.conflicts.mode.skip\"\n            />\n          </NativeSelect>\n        </div>\n      </CardContent>\n    </Container>\n  );\n\n  let errorCards = error && (\n    <Container>\n      <CardHeader title={translate(\"import_users.error.error\")} />\n      <CardContent>\n        {(Array.isArray(error) ? error : [error]).map(e => (\n          <div>{e}</div>\n        ))}\n      </CardContent>\n    </Container>\n  );\n\n  let uploadCard = !importResults && (\n    <Container>\n      <CardHeader title={translate(\"import_users.cards.upload.header\")} />\n      <CardContent>\n        {translate(\"import_users.cards.upload.explanation\")}\n        <a href=\"./data/example.csv\">example.csv</a>\n        <br />\n        <br />\n        <input\n          type=\"file\"\n          onChange={onFileChange}\n          enabled={(progress !== null).toString()}\n        />\n      </CardContent>\n    </Container>\n  );\n\n  let resultsCard = importResults && (\n    <CardContent>\n      <CardHeader title={translate(\"import_users.cards.results.header\")} />\n      <div>\n        {translate(\n          \"import_users.cards.results.total\",\n          importResults.totalRecordCount\n        )}\n        <br />\n        {translate(\n          \"import_users.cards.results.successful\",\n          importResults.succeededRecords.length\n        )}\n        <br />\n        {importResults.skippedRecords.length\n          ? [\n              translate(\n                \"import_users.cards.results.skipped\",\n                importResults.skippedRecords.length\n              ),\n              <div>\n                <button onClick={downloadSkippedRecords}>\n                  {translate(\"import_users.cards.results.download_skipped\")}\n                </button>\n              </div>,\n              <br />,\n            ]\n          : \"\"}\n        {importResults.erroredRecords.length\n          ? [\n              translate(\n                \"import_users.cards.results.skipped\",\n                importResults.erroredRecords.length\n              ),\n              <br />,\n            ]\n          : \"\"}\n        <br />\n        {importResults.wasDryRun && [\n          translate(\"import_users.cards.results.simulated_only\"),\n          <br />,\n        ]}\n      </div>\n    </CardContent>\n  );\n\n  let startImportCard =\n    !values || values.length === 0 || importResults ? undefined : (\n      <CardActions>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={dryRun}\n              onChange={onDryRunModeChanged}\n              enabled={(progress !== null).toString()}\n            />\n          }\n          label={translate(\"import_users.cards.startImport.simulate_only\")}\n        />\n        <Button\n          size=\"large\"\n          onClick={runImport}\n          enabled={(progress !== null).toString()}\n        >\n          {translate(\"import_users.cards.startImport.run_import\")}\n        </Button>\n        {progress !== null ? (\n          <div>\n            {progress.done} of {progress.limit} done\n          </div>\n        ) : null}\n      </CardActions>\n    );\n\n  let allCards = [];\n  if (uploadCard) allCards.push(uploadCard);\n  if (errorCards) allCards.push(errorCards);\n  if (conflictCards) allCards.push(conflictCards);\n  if (statsCards) allCards.push(...statsCards);\n  if (startImportCard) allCards.push(startImportCard);\n  if (resultsCard) allCards.push(resultsCard);\n\n  let cardContainer = <Card>{allCards}</Card>;\n\n  return [\n    <Title defaultTitle={translate(\"import_users.title\")} />,\n    cardContainer,\n  ];\n};\n\nexport const ImportFeature = FilePicker;\n","import germanMessages from \"ra-language-german\";\n\nexport default {\n  ...germanMessages,\n  synapseadmin: {\n    auth: {\n      base_url: \"Heimserver URL\",\n      welcome: \"Willkommen bei Synapse-admin\",\n      server_version: \"Synapse Version\",\n      username_error: \"Bitte vollständigen Nutzernamen angeben: '@user:domain'\",\n      protocol_error: \"Die URL muss mit 'http://' oder 'https://' beginnen\",\n      url_error: \"Keine gültige Matrix Server URL\",\n    },\n    users: {\n      invalid_user_id:\n        \"Muss eine vollständige Matrix Benutzer-ID sein, z.B. @benutzer_id:homeserver\",\n    },\n    rooms: {\n      details: \"Raumdetails\",\n      tabs: {\n        basic: \"Allgemein\",\n        members: \"Mitglieder\",\n        detail: \"Details\",\n        permission: \"Berechtigungen\",\n      },\n      delete: {\n        title: \"Raum löschen\",\n        message:\n          \"Sind Sie sicher dass Sie den Raum löschen möchten? Diese Aktion kann nicht rückgängig gemacht werden. Alle Nachrichten und Medien, die der Raum beinhaltet werden vom Server gelöscht!\",\n      },\n    },\n    reports: { tabs: { basic: \"Allgemein\", detail: \"Details\" } },\n  },\n  import_users: {\n    error: {\n      at_entry: \"Bei Eintrag %{entry}: %{message}\",\n      error: \"Fehler\",\n      required_field: \"Pflichtfeld '%{field}' fehlt\",\n      invalid_value:\n        \"Ungültiger Wert in Zeile %{row}. Feld '%{field}' darf nur die Werte 'true' oder 'false' enthalten\",\n      unreasonably_big: \"Datei ist zu groß für den Import (%{size} Megabytes)\",\n      already_in_progress: \"Es läuft bereits ein Import\",\n      id_exits: \"ID %{id} existiert bereits\",\n    },\n    title: \"Benutzer aus CSV importieren\",\n    goToPdf: \"Gehe zum PDF\",\n    cards: {\n      importstats: {\n        header: \"Benutzer importieren\",\n        users_total:\n          \"%{smart_count} Benutzer in der CSV Datei |||| %{smart_count} Benutzer in der CSV Datei\",\n        guest_count: \"%{smart_count} Gast |||| %{smart_count} Gäste\",\n        admin_count:\n          \"%{smart_count} Server Administrator |||| %{smart_count} Server Administratoren\",\n      },\n      conflicts: {\n        header: \"Konfliktstrategie\",\n        mode: {\n          stop: \"Stoppe bei Fehlern\",\n          skip: \"Zeige Fehler und überspringe fehlerhafte Einträge\",\n        },\n      },\n      ids: {\n        header: \"IDs\",\n        all_ids_present: \"IDs in jedem Eintrag vorhanden\",\n        count_ids_present:\n          \"%{smart_count} Eintrag mit ID |||| %{smart_count} Einträge mit IDs\",\n        mode: {\n          ignore: \"Ignoriere IDs der CSV-Datei und erstelle neue\",\n          update: \"Aktualisiere existierende Benutzer\",\n        },\n      },\n      passwords: {\n        header: \"Passwörter\",\n        all_passwords_present: \"Passwörter in jedem Eintrag vorhanden\",\n        count_passwords_present:\n          \"%{smart_count} Eintrag mit Passwort |||| %{smart_count} Einträge mit Passwörtern\",\n        use_passwords: \"Verwende Passwörter aus der CSV Datei\",\n      },\n      upload: {\n        header: \"CSV Datei importieren\",\n        explanation:\n          \"Hier können Sie eine Datei mit kommagetrennten Daten hochladen, die verwendet werden um Benutzer anzulegen oder zu ändern. Die Datei muss mindestens die Felder 'id' und 'displayname' enthalten. Hier können Sie eine Beispieldatei herunterladen und anpassen: \",\n      },\n      startImport: {\n        simulate_only: \"Nur simulieren\",\n        run_import: \"Importieren\",\n      },\n      results: {\n        header: \"Ergebnis\",\n        total:\n          \"%{smart_count} Eintrag insgesamt |||| %{smart_count} Einträge insgesamt\",\n        successful: \"%{smart_count} Einträge erfolgreich importiert\",\n        skipped: \"%{smart_count} Einträge übersprungen\",\n        download_skipped: \"Übersprungene Einträge herunterladen\",\n        with_error:\n          \"%{smart_count} Eintrag mit Fehlern ||| %{smart_count} Einträge mit Fehlern\",\n        simulated_only: \"Import-Vorgang war nur simuliert\",\n      },\n    },\n  },\n  resources: {\n    users: {\n      backtolist: \"Zurück zur Liste\",\n      name: \"Benutzer\",\n      email: \"E-Mail\",\n      msisdn: \"Telefon\",\n      threepid: \"E-Mail / Telefon\",\n      fields: {\n        avatar: \"Avatar\",\n        id: \"Benutzer-ID\",\n        name: \"Name\",\n        is_guest: \"Gast\",\n        admin: \"Server Administrator\",\n        deactivated: \"Deaktiviert\",\n        guests: \"Zeige Gäste\",\n        show_deactivated: \"Zeige deaktivierte Benutzer\",\n        user_id: \"Suche Benutzer\",\n        displayname: \"Anzeigename\",\n        password: \"Passwort\",\n        avatar_url: \"Avatar URL\",\n        avatar_src: \"Avatar\",\n        medium: \"Medium\",\n        threepids: \"3PIDs\",\n        address: \"Adresse\",\n        creation_ts_ms: \"Zeitpunkt der Erstellung\",\n        consent_version: \"Zugestimmte Geschäftsbedingungen\",\n      },\n      helper: {\n        deactivate:\n          \"Sie müssen ein Passwort angeben, um ein Konto wieder zu aktivieren.\",\n        erase: \"DSGVO konformes Löschen der Benutzerdaten\",\n      },\n      action: {\n        erase: \"Lösche Benutzerdaten\",\n      },\n    },\n    rooms: {\n      name: \"Raum |||| Räume\",\n      fields: {\n        room_id: \"Raum-ID\",\n        name: \"Name\",\n        canonical_alias: \"Alias\",\n        joined_members: \"Mitglieder\",\n        joined_local_members: \"Lokale Mitglieder\",\n        state_events: \"Ereignisse\",\n        version: \"Version\",\n        is_encrypted: \"Verschlüsselt\",\n        encryption: \"Verschlüsselungs-Algorithmus\",\n        federatable: \"Fö­de­rierbar\",\n        public: \"Öffentlich\",\n        creator: \"Ersteller\",\n        join_rules: \"Beitrittsregeln\",\n        guest_access: \"Gastzugriff\",\n        history_visibility: \"Historie-Sichtbarkeit\",\n      },\n      enums: {\n        join_rules: {\n          public: \"Öffentlich\",\n          knock: \"Auf Anfrage\",\n          invite: \"Nur auf Einladung\",\n          private: \"Privat\",\n        },\n        guest_access: {\n          can_join: \"Gäste können beitreten\",\n          forbidden: \"Gäste können nicht beitreten\",\n        },\n        history_visibility: {\n          invited: \"Ab Einladung\",\n          joined: \"Ab Beitritt\",\n          shared: \"Ab Setzen der Einstellung\",\n          world_readable: \"Jeder\",\n        },\n        unencrypted: \"Nicht verschlüsselt\",\n      },\n    },\n    reports: {\n      name: \"Ereignisbericht |||| Ereignisberichte\",\n      fields: {\n        id: \"ID\",\n        received_ts: \"Meldezeit\",\n        user_id: \"Meldender\",\n        name: \"Raumname\",\n        score: \"Wert\",\n        reason: \"Grund\",\n        event_id: \"Event-ID\",\n        event_json: {\n          origin: \"Ursprungsserver\",\n          origin_server_ts: \"Sendezeit\",\n          type: \"Eventtyp\",\n          content: {\n            msgtype: \"Inhaltstyp\",\n            body: \"Nachrichteninhalt\",\n            format: \"Nachrichtenformat\",\n            formatted_body: \"Formatierter Nachrichteninhalt\",\n            algorithm: \"Verschlüsselungsalgorithmus\",\n          },\n        },\n      },\n    },\n    connections: {\n      name: \"Verbindungen\",\n      fields: {\n        last_seen: \"Datum\",\n        ip: \"IP-Adresse\",\n        user_agent: \"User Agent\",\n      },\n    },\n    devices: {\n      name: \"Gerät |||| Geräte\",\n      fields: {\n        device_id: \"Geräte-ID\",\n        display_name: \"Gerätename\",\n        last_seen_ts: \"Zeitstempel\",\n        last_seen_ip: \"IP-Adresse\",\n      },\n      action: {\n        erase: {\n          title: \"Entferne %{id}\",\n          content: 'Möchten Sie das Gerät \"%{name}\" wirklich entfernen?',\n          success: \"Gerät erfolgreich entfernt.\",\n          failure: \"Beim Entfernen ist ein Fehler aufgetreten.\",\n        },\n      },\n    },\n    users_media: {\n      name: \"Medien\",\n      fields: {\n        media_id: \"Medien ID\",\n        media_length: \"Größe\",\n        media_type: \"Typ\",\n        upload_name: \"Dateiname\",\n        quarantined_by: \"Zur Quarantäne hinzugefügt\",\n        safe_from_quarantine: \"Geschützt vor Quarantäne\",\n        created_ts: \"Erstellt\",\n        last_access_ts: \"Letzter Zugriff\",\n      },\n    },\n    pushers: {\n      name: \"Pusher |||| Pushers\",\n      fields: {\n        app: \"App\",\n        app_display_name: \"App-Anzeigename\",\n        app_id: \"App ID\",\n        device_display_name: \"Geräte-Anzeigename\",\n        kind: \"Art\",\n        lang: \"Sprache\",\n        profile_tag: \"Profil-Tag\",\n        pushkey: \"Pushkey\",\n        data: { url: \"URL\" },\n      },\n    },\n    servernotices: {\n      name: \"Serverbenachrichtigungen\",\n      send: \"Servernachricht versenden\",\n      fields: {\n        body: \"Nachricht\",\n      },\n      action: {\n        send: \"Sende Nachricht\",\n        send_success: \"Nachricht erfolgreich versendet.\",\n        send_failure: \"Beim Versenden ist ein Fehler aufgetreten.\",\n      },\n      helper: {\n        send:\n          'Sendet eine Serverbenachrichtigung an die ausgewählten Nutzer. Hierfür muss das Feature \"Server Notices\" auf dem Server aktiviert sein.',\n      },\n    },\n    user_media_statistics: {\n      name: \"Dateien je Benutzer\",\n      fields: {\n        media_count: \"Anzahl der Dateien\",\n        media_length: \"Größe der Dateien\",\n      },\n    },\n  },\n  ra: {\n    ...germanMessages.ra,\n    auth: {\n      ...germanMessages.ra.auth,\n      auth_check_error: \"Anmeldung fehlgeschlagen\",\n    },\n    input: {\n      ...germanMessages.ra.input,\n      password: {\n        ...germanMessages.ra.input.password,\n        toggle_hidden: \"Anzeigen\",\n        toggle_visible: \"Verstecken\",\n      },\n    },\n    notification: {\n      ...germanMessages.ra.notifiaction,\n      logged_out: \"Abgemeldet\",\n    },\n    page: {\n      ...germanMessages.ra.page,\n      empty: \"Keine Einträge vorhanden\",\n      invite: \"\",\n    },\n  },\n};\n","import React from \"react\";\nimport { Admin, Resource, resolveBrowserLocale } from \"react-admin\";\nimport polyglotI18nProvider from \"ra-i18n-polyglot\";\nimport authProvider from \"./synapse/authProvider\";\nimport dataProvider from \"./synapse/dataProvider\";\nimport { UserList, UserCreate, UserEdit } from \"./components/users\";\nimport { RoomList, RoomShow } from \"./components/rooms\";\nimport { ReportList, ReportShow } from \"./components/EventReports\";\nimport LoginPage from \"./components/LoginPage\";\nimport UserIcon from \"@material-ui/icons/Group\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\nimport { UserMediaStatsList } from \"./components/statistics\";\nimport RoomIcon from \"@material-ui/icons/ViewList\";\nimport ReportIcon from \"@material-ui/icons/Warning\";\nimport { ImportFeature } from \"./components/ImportFeature\";\nimport { Route } from \"react-router-dom\";\nimport germanMessages from \"./i18n/de\";\nimport englishMessages from \"./i18n/en\";\n\n// TODO: Can we use lazy loading together with browser locale?\nconst messages = {\n  de: germanMessages,\n  en: englishMessages,\n};\nconst i18nProvider = polyglotI18nProvider(\n  locale => (messages[locale] ? messages[locale] : messages.en),\n  resolveBrowserLocale()\n);\n\nconst App = () => (\n  <Admin\n    loginPage={LoginPage}\n    authProvider={authProvider}\n    dataProvider={dataProvider}\n    i18nProvider={i18nProvider}\n    customRoutes={[\n      <Route key=\"userImport\" path=\"/import_users\" component={ImportFeature} />,\n    ]}\n  >\n    <Resource\n      name=\"users\"\n      list={UserList}\n      create={UserCreate}\n      edit={UserEdit}\n      icon={UserIcon}\n    />\n    <Resource name=\"rooms\" list={RoomList} show={RoomShow} icon={RoomIcon} />\n    <Resource\n      name=\"user_media_statistics\"\n      list={UserMediaStatsList}\n      icon={EqualizerIcon}\n    />\n    <Resource\n      name=\"reports\"\n      list={ReportList}\n      show={ReportShow}\n      icon={ReportIcon}\n    />\n    <Resource name=\"connections\" />\n    <Resource name=\"devices\" />\n    <Resource name=\"room_members\" />\n    <Resource name=\"users_media\" />\n    <Resource name=\"joined_rooms\" />\n    <Resource name=\"pushers\" />\n    <Resource name=\"servernotices\" />\n  </Admin>\n);\n\nexport default App;\n","import englishMessages from \"ra-language-english\";\n\nexport default {\n  ...englishMessages,\n  synapseadmin: {\n    auth: {\n      homeserver: \"Homeserver\",\n      welcome: \"Welcome to Navgurukul Admin\",\n      base_url: \"Homeserver URL\",\n      username_error: \"Please enter fully qualified user ID: '@user:domain'\",\n      protocol_error: \"URL has to start with 'http://' or 'https://'\",\n      url_error: \"Not a valid Matrix server URL\",\n    },\n    users: {\n      invalid_user_id:\n        \"Please enter a proper username.\",\n    },\n    rooms: {\n      tabs: {\n        basic: \"Basic\",\n        members: \"Members\",\n        detail: \"Details\",\n        permission: \"Permissions\",\n      },\n      delete: {\n        title: \"Delete room\",\n        message:\n          \"Are you sure you want to delete the room? This cannot be undone. All messages and shared media in the room will be deleted from the server!\",\n      },\n    },\n    reports: { tabs: { basic: \"Basic\", detail: \"Details\" } },\n  },\n  import_users: {\n    error: {\n      at_entry: \"At entry %{entry}: %{message}\",\n      error: \"Error\",\n      required_field: \"Required field '%{field}' is not present\",\n      invalid_value:\n        \"Invalid value on line %{row}. '%{field}' field may only be 'true' or 'false'\",\n      unreasonably_big:\n        \"Refused to load unreasonably big file of %{size} megabytes\",\n      already_in_progress: \"An import run is already in progress\",\n      id_exits: \"ID %{id} already present\",\n    },\n    title: \"Import users via CSV\",\n    goToPdf: \"Go to PDF\",\n    cards: {\n      importstats: {\n        header: \"Import users\",\n        users_total:\n          \"%{smart_count} user in CSV file |||| %{smart_count} users in CSV file\",\n        guest_count: \"%{smart_count} guest |||| %{smart_count} guests\",\n        admin_count: \"%{smart_count} admin |||| %{smart_count} admins\",\n      },\n      conflicts: {\n        header: \"Conflict strategy\",\n        mode: {\n          stop: \"Stop on conflict\",\n          skip: \"Show error and skip on conflict\",\n        },\n      },\n      ids: {\n        header: \"IDs\",\n        all_ids_present: \"IDs present on every entry\",\n        count_ids_present:\n          \"%{smart_count} entry with ID |||| %{smart_count} entries with IDs\",\n        mode: {\n          ignore: \"Ignore IDs in CSV and create new ones\",\n          update: \"Update existing records\",\n        },\n      },\n      passwords: {\n        header: \"Passwords\",\n        all_passwords_present: \"Passwords present on every entry\",\n        count_passwords_present:\n          \"%{smart_count} entry with password |||| %{smart_count} entries with passwords\",\n        use_passwords: \"Use passwords from CSV\",\n      },\n      upload: {\n        header: \"Input CSV file\",\n        explanation:\n          \"Here you can upload a file with comma separated values that is processed to create or update users. The file must include the fields 'id' and 'displayname'. You can download and adapt an example file here: \",\n      },\n      startImport: {\n        simulate_only: \"Simulate only\",\n        run_import: \"Import\",\n      },\n      results: {\n        header: \"Import results\",\n        total:\n          \"%{smart_count} entry in total |||| %{smart_count} entries in total\",\n        successful: \"%{smart_count} entries successfully imported\",\n        skipped: \"%{smart_count} entries skipped\",\n        download_skipped: \"Download skipped records\",\n        with_error:\n          \"%{smart_count} entry with errors ||| %{smart_count} entries with errors\",\n        simulated_only: \"Run was only simulated\",\n      },\n    },\n  },\n  resources: {\n    users: {\n      backtolist: \"Back to list\",\n      name: \"User |||| Users\",\n      email: \"Email\",\n      msisdn: \"Phone\",\n      threepid: \"Email / Phone\",\n      fields: {\n        avatar: \"Avatar\",\n        id: \"User-ID\",\n        name: \"Name\",\n        is_guest: \"Guest\",\n        admin: \"Server Administrator\",\n        deactivated: \"Deactivated\",\n        guests: \"Show guests\",\n        show_deactivated: \"Show deactivated members\",\n        user_id: \"Search Member\",\n        displayname: \"Displayname\",\n        password: \"Password\",\n        avatar_url: \"Avatar URL\",\n        avatar_src: \"Avatar\",\n        medium: \"Medium\",\n        threepids: \"3PIDs\",\n        address: \"Address\",\n        creation_ts_ms: \"Creation timestamp\",\n        consent_version: \"Consent version\",\n      },\n      helper: {\n        deactivate: \"You must provide a password to re-activate an account.\",\n        erase: \"Mark the user as GDPR-erased\",\n      },\n      action: {\n        erase: \"Erase member data\",\n      },\n    },\n    rooms: {\n      name: \"Room |||| Rooms\",\n      fields: {\n        room_id: \"Room-ID\",\n        name: \"Name\",\n        canonical_alias: \"Alias\",\n        joined_members: \"Members\",\n        joined_local_members: \"local members\",\n        state_events: \"State events\",\n        version: \"Version\",\n        is_encrypted: \"Encrypted\",\n        encryption: \"Encryption\",\n        federatable: \"Federatable\",\n        public: \"Public\",\n        creator: \"Creator\",\n        join_rules: \"Join rules\",\n        guest_access: \"Guest access\",\n        history_visibility: \"History visibility\",\n      },\n      enums: {\n        join_rules: {\n          public: \"Public\",\n          knock: \"Knock\",\n          invite: \"Invite\",\n          private: \"Private\",\n        },\n        guest_access: {\n          can_join: \"Guests can join\",\n          forbidden: \"Guests can not join\",\n        },\n        history_visibility: {\n          invited: \"Since invited\",\n          joined: \"Since joined\",\n          shared: \"Since shared\",\n          world_readable: \"Anyone\",\n        },\n        unencrypted: \"Unencrypted\",\n      },\n    },\n    reports: {\n      name: \"Reported event |||| Reported events\",\n      fields: {\n        id: \"ID\",\n        received_ts: \"report time\",\n        user_id: \"announcer\",\n        name: \"name of the room\",\n        score: \"score\",\n        reason: \"reason\",\n        event_id: \"event ID\",\n        event_json: {\n          origin: \"origin server\",\n          origin_server_ts: \"time of send\",\n          type: \"event typ\",\n          content: {\n            msgtype: \"content type\",\n            body: \"content\",\n            format: \"format\",\n            formatted_body: \"formatted content\",\n            algorithm: \"algorithm\",\n          },\n        },\n      },\n    },\n    connections: {\n      name: \"Connections\",\n      fields: {\n        last_seen: \"Date\",\n        ip: \"IP address\",\n        user_agent: \"User agent\",\n      },\n    },\n    devices: {\n      name: \"Device |||| Devices\",\n      fields: {\n        device_id: \"Device-ID\",\n        display_name: \"Device name\",\n        last_seen_ts: \"Timestamp\",\n        last_seen_ip: \"IP address\",\n      },\n      action: {\n        erase: {\n          title: \"Removing %{id}\",\n          content: 'Are you sure you want to remove the device \"%{name}\"?',\n          success: \"Device successfully removed.\",\n          failure: \"An error has occurred.\",\n        },\n      },\n    },\n    users_media: {\n      name: \"Media\",\n      fields: {\n        media_id: \"Media ID\",\n        media_length: \"Lenght\",\n        media_type: \"Type\",\n        upload_name: \"File name\",\n        quarantined_by: \"Quarantined by\",\n        safe_from_quarantine: \"Safe from quarantine\",\n        created_ts: \"Created\",\n        last_access_ts: \"Last access\",\n      },\n    },\n    pushers: {\n      name: \"Pusher |||| Pushers\",\n      fields: {\n        app: \"App\",\n        app_display_name: \"App display name\",\n        app_id: \"App ID\",\n        device_display_name: \"Device display name\",\n        kind: \"Kind\",\n        lang: \"Language\",\n        profile_tag: \"Profile tag\",\n        pushkey: \"Pushkey\",\n        data: { url: \"URL\" },\n      },\n    },\n    servernotices: {\n      name: \"Server Notices\",\n      send: \"Send server notices\",\n      fields: {\n        body: \"Message\",\n      },\n      action: {\n        send: \"Send note\",\n        send_success: \"Server notice successfully sent.\",\n        send_failure: \"An error has occurred.\",\n      },\n      helper: {\n        send:\n          'Sends a server notice to the selected users. The feature \"Server Notices\" has to be activated at the server.',\n      },\n    },\n    user_media_statistics: {\n      name: \"Users' media\",\n      fields: {\n        media_count: \"Media count\",\n        media_length: \"Media length\",\n      },\n    },\n  },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}